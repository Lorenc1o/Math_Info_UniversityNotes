#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\begin_modules
tcolorbox
algorithm2e
theorems-std
theorems-sec
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 3cm
\headsep 3cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Grafos y Optimización Discreta
\end_layout

\begin_layout Author
Jose Antonio Lorencio Abril
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Conceptos básicos de Teoría de Grafos
\end_layout

\begin_layout Subsection
Grafos dirigidos y no dirigidos
\end_layout

\begin_layout Standard
Un 
\series bold
grafo
\series default
 representa las relaciones entre un conjunto de objetos con respecto a una
 cierta característica.
 El conjunto de objetos (
\series bold
vértices o nodos
\series default
) se representa por 
\begin_inset Formula $V$
\end_inset

.
 Para indicar cómo se relacionan, se toma 
\begin_inset Formula $X\subset V\times V:\left(i,j\right)\in X\implies\text{\ensuremath{i} está relacionado con \ensuremath{j}}$
\end_inset

.
\end_layout

\begin_layout Standard
Un 
\series bold
grafo no dirigido
\series default
 es aquel en que la relación es simétrica:
\begin_inset Formula 
\[
\left(i,j\right)\in X\implies\left(j,i\right)\in X
\]

\end_inset

 y en este caso los elementos de 
\begin_inset Formula $X$
\end_inset

 se denominan 
\series bold
ejes
\series default
.
\end_layout

\begin_layout Standard
Un 
\series bold
grafo dirigido
\series default
 es aquel en que la relación no es simétrica, y los elementos de 
\begin_inset Formula $X$
\end_inset

 se denominan 
\series bold
arcos
\series default
.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 se denomina 
\series bold
orden de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset

 
\series default
al número de vértices, 
\begin_inset Formula $\left|V\right|$
\end_inset

, y 
\series bold
tamaño de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset

 
\series default
al número de ejes, 
\begin_inset Formula $\left|E\right|$
\end_inset

.
\end_layout

\begin_layout Definition
Un eje de la forma 
\begin_inset Formula $\left(i,i\right)$
\end_inset

 se denomina 
\series bold
bucle
\series default
.
\end_layout

\begin_layout Definition
En ocasiones, pueden haber varios ejes conectando los mismos pares de vértices,
 estos ejes se denominan 
\series bold
ejes paralelos
\series default
.
 En caso de tener ejes paralelos, se dice que el grafo es un 
\series bold
multigrafo.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un 
\series bold
grafo simple
\series default
 es un grafo sin ejes paralelos ni bucles.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A partir de ahora, mientras no se diga lo contrarioo, consideraremos grafos
 simples no dirigidos.
\end_layout

\begin_layout Subsection
Algunos tipos de grafos.
 Subgrafos
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo no dirigido:
\end_layout

\begin_deeper
\begin_layout Itemize
Se llama 
\series bold
grafo complementario de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset

 
\series default
al grafo 
\begin_inset Formula $G^{c}=\left(V,E^{c}\right)$
\end_inset

 donde 
\begin_inset Formula 
\[
E^{c}=\left\{ \left(i,j\right)\in V\times V|i\neq j,\left(i,j\right)\notin E\right\} 
\]

\end_inset


\end_layout

\begin_layout Itemize
Se dice que 
\begin_inset Formula $G$
\end_inset

 es 
\series bold
completo
\series default
 si 
\begin_inset Formula $\forall i,j\in V,i\neq j\implies\left(i,j\right)\in E$
\end_inset

.
 Se denota 
\begin_inset Formula $K_{n}$
\end_inset

 al grafo completo de orden 
\begin_inset Formula $n$
\end_inset

, y tiene tamaño 
\begin_inset Formula $\binom{n}{2}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $G$
\end_inset

 es 
\series bold
bipartito
\series default
 si se puede particionar el conjunto de vértices 
\begin_inset Formula $V$
\end_inset

 en dos subconjuntos disjuntos 
\begin_inset Formula $V=V_{1}\cup V_{2},\ V_{1}\cap V_{2}=\emptyset$
\end_inset

 tales que
\begin_inset Formula 
\[
\forall\left(i,j\right)\in E\implies\left\{ i\in V_{1},j\in V_{2}\text{ o bien }i\in V_{2},j\in V_{1}\right\} 
\]

\end_inset

 se denota 
\begin_inset Formula $K_{n,m}$
\end_inset

 al grafo completo bipartito con 
\begin_inset Formula $\left|V_{1}\right|=n,\ \left|V_{2}\right|=m$
\end_inset

, tiene tamaño 
\begin_inset Formula $n\cdot m$
\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo no dirigido.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $G'=\left(V',E'\right)$
\end_inset

 es un 
\series bold
subgrafo
\series default
 de 
\begin_inset Formula $G$
\end_inset

 si 
\begin_inset Formula $V'\subset V$
\end_inset

 y 
\begin_inset Formula $E'\subset E\cap\left(V'\times V'\right)$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $V'=V$
\end_inset

 se dice que 
\begin_inset Formula $G'$
\end_inset

 es un 
\series bold
subgrafo generador 
\series default
de 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $V'\subset V$
\end_inset

, el 
\series bold
subgrafo de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset

 inducido por 
\begin_inset Formula $\boldsymbol{V'}$
\end_inset

 
\series default
es el grafo 
\begin_inset Formula 
\[
G_{V'}=\left(V',E_{V'}\right),\ E_{V'}=E\cap\left(V'\times V'\right)
\]

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un 
\series bold
cliqué
\series default
 es un subgrafo completo de 
\begin_inset Formula $G$
\end_inset

.
 Un cliqué se dice 
\series bold
maximal
\series default
 si no está contenido en ningún otro cliqué de 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dos grafos simples 
\begin_inset Formula $G=\left(V,E\right),\ G'=\left(V',E'\right)$
\end_inset

 son 
\series bold
isomorfos
\series default
 si existe una biyección
\begin_inset Formula 
\[
\varphi:V\rightarrow V'
\]

\end_inset

 que verifica
\begin_inset Formula 
\[
\forall u,v\in V,\ \left(u,v\right)\in E\iff\left(\varphi\left(u\right),\varphi\left(v\right)\right)\in E'
\]

\end_inset

 En tal caso, 
\begin_inset Formula $\varphi$
\end_inset

 es un 
\series bold
isomorfismo de grafos
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Grado de incidencia
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo no dirigido y 
\begin_inset Formula $e=\left(i,j\right)\in E$
\end_inset

, entonces se dice que:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $i,j$
\end_inset

 son 
\series bold
vértices extremos 
\series default
del eje 
\begin_inset Formula $e$
\end_inset


\end_layout

\begin_layout Itemize
el eje 
\begin_inset Formula $e$
\end_inset

 es 
\series bold
incidente 
\series default
a los vértices 
\begin_inset Formula $i,j$
\end_inset


\end_layout

\begin_layout Itemize
los vértices 
\begin_inset Formula $i,j$
\end_inset

 son 
\series bold
adyacentes
\series default
 entre sí 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Se define el 
\series bold
grado de un vértice 
\begin_inset Formula $\boldsymbol{v}$
\end_inset


\series default
, 
\begin_inset Formula $o\left(v\right)$
\end_inset

 como el número de ejes incidentes a 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Definition
Un nodo de grado 0 se dice que es 
\series bold
aislado
\series default
.
\end_layout

\begin_layout Definition
Un nodo de grado 1 se dice que es 
\series bold
hoja
\series default
.
\end_layout

\begin_layout Definition
El único eje incidente a una hoja se dice que es un 
\series bold
eje colgante
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dado un grafo 
\begin_inset Formula $G$
\end_inset

, denotaremos
\begin_inset Formula 
\[
\delta_{G}=\min\left\{ o\left(v\right):v\in G\right\} 
\]

\end_inset


\begin_inset Formula 
\[
\Delta_{G}=\max\left\{ o\left(v\right):v\in G\right\} 
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G$
\end_inset

, la secuencia formada por los grados de los vértices de 
\begin_inset Formula $G$
\end_inset

 ordenados de forma decreciente se denomina 
\series bold
secuencia de grados de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un grafo se dice 
\series bold
regular
\series default
 si todos los vértices tienen el mismo grado
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
La suma de los grados de los vértices de un grado es igual al doble del
 tamaño del grafo
\begin_inset Formula 
\[
\sum_{v\in V}o\left(v\right)=2\cdot m
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Si 
\begin_inset Formula $m$
\end_inset

 es el tamaño del grafo, entonces hay 
\begin_inset Formula $m$
\end_inset

 ejes, cada uno conectado a los dos nodos.
 Por tanto, al hacer la suma contamos dos veces cada eje
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Corollary
Todo grafo tiene un número par de nodos de grado impar
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Por el teorema anterior tenemos que
\begin_inset Formula 
\[
\sum_{v\in V}o\left(v\right)=2m
\]

\end_inset

 y esta suma puede descomponerse como
\begin_inset Formula 
\[
\sum_{v\in V,o\left(v\right)\ impar}o\left(v\right)+\sum_{v\in V,o\left(v\right)\ par}o\left(v\right)=\sum_{v\in V,o\left(v\right)\ impar}o\left(v\right)+2k
\]

\end_inset

 o sea
\begin_inset Formula 
\[
\sum_{v\in V,o\left(v\right)\ impar}o\left(v\right)=2\left(m-k\right)=2k'
\]

\end_inset

 Y tenemos una suma de números impares, cuyo resultado es par.
 Pero esto quiere decir que debe haber una cantidad par de sumandos
\end_layout

\begin_layout Subsubsection
Secuencia gráfica
\end_layout

\begin_layout Standard
Una secuencia 
\begin_inset Formula $S=\left(d_{1},...,d_{n}\right)$
\end_inset

 decreciente de enteros no negativos es una 
\series bold
secuencia gŕafica
\series default
 si existe un grafo simple 
\begin_inset Formula $G$
\end_inset

 cuya secuencia de grados es 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
Erdös y Gallai.
\end_layout

\begin_layout Theorem
Sea 
\begin_inset Formula $S=\left(d_{1},...,d_{n}\right)$
\end_inset

 una secuencia decreciente de enteros no negativos.
\end_layout

\begin_layout Theorem
S es una secuencia gráfica si, y solo si, 
\begin_inset Formula $\sum_{i=1}^{n}d_{i}$
\end_inset

 es par y
\begin_inset Formula 
\[
\sum_{i=1}^{k}d_{i}\leq k\left(k-1\right)+\sum_{i=k+1}^{n}\min\left\{ k,d_{i}\right\} 
\]

\end_inset

 para cada 
\begin_inset Formula $1\leq k\leq n-1$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 Tenemos en cuenta los 
\begin_inset Formula $k$
\end_inset

 primeros nodos.
 Entre ellos hay, a lo sumo, 
\begin_inset Formula $\binom{k}{2}=\frac{k\left(k-1\right)}{2}$
\end_inset

 ejes, luego la suma de los grados de este subgrafo está acotada por el
 doble, 
\begin_inset Formula $k\left(k-1\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Ahora bien, el nodo 
\begin_inset Formula $k+i$
\end_inset

 se une, como mucho, a 
\begin_inset Formula $k$
\end_inset

 nodos entre los 
\begin_inset Formula $k$
\end_inset

 primeros, o a 
\begin_inset Formula $d_{k+i}$
\end_inset

 si 
\begin_inset Formula $d_{k+i}<k$
\end_inset

.
\end_layout

\begin_layout Proof
Por tanto, se tiene la desigualdad:
\begin_inset Formula 
\[
\sum_{i=1}^{k}d_{i}\leq k\left(k-1\right)+\sum_{i=k+1}^{n}\min\left\{ k,d_{i}\right\} 
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Necesitamos unas definiciones previas:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
Subrealización: 
\series default
dado 
\begin_inset Formula $S=\left(d_{1},...,d_{n}\right)$
\end_inset

 una subrealización es un grafo 
\begin_inset Formula $G=\left(V,E^{S}\right),V=\left\{ 1,...,n\right\} $
\end_inset

 tal que 
\begin_inset Formula $o\left(i\right)\leq d_{i},\ \forall i$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
Conjunto independiente:
\series default
 
\begin_inset Formula $X\subset V$
\end_inset

 es independiente si 
\begin_inset Formula $\forall v,w\in X,\ \left(v,w\right)\notin E$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
Entorno:
\series default
 dado 
\begin_inset Formula $v\in V$
\end_inset

 un entorno es el conjunto 
\begin_inset Formula $N\left(v\right)=\left\{ u\in V:\left(v,u\right)\in E\right\} $
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
Índice crítico:
\series default
 dada una subrealización 
\begin_inset Formula $G=\left(V,E^{S}\right)$
\end_inset

, el índice crítico es el mayor índice 
\begin_inset Formula $h$
\end_inset

 tal que 
\begin_inset Formula $d_{i}=o\left(i\right),\ \forall i<h$
\end_inset


\end_layout

\begin_layout Proof
Y se define el siguiente algoritmo:
\end_layout

\begin_layout Itemize

\series bold
Paso inicial:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $E^{S}=\emptyset,\ h=1,\ G=\left(V,E^{S}\right)\text{ es subrealización de \ensuremath{S} }$
\end_inset


\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $S=\left(0,...,0\right)$
\end_inset

, FIN
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Paso general:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $G=\left(V,E^{S}\right)$
\end_inset

 es la subrealización actual, 
\begin_inset Formula $h$
\end_inset

 índice crítico.
\end_layout

\begin_layout Standard
\begin_inset Formula $X=\left\{ h+1,...,n\right\} $
\end_inset

 es independiente, porque en el paso inicial lo es (obvio) y en los siguiente
 no modificamos la independencia.
\end_layout

\begin_layout Standard
Se verifica
\begin_inset Formula 
\[
d_{i}-o\left(i\right)=0\ \forall i<h
\]

\end_inset


\begin_inset Formula 
\[
d_{h}-o\left(h\right)>0
\]

\end_inset

 Aplicando cada uno de los siguientes pasos conseguiremos reducir 
\begin_inset Formula $d_{h}-o\left(h\right)$
\end_inset

 sin alterar 
\begin_inset Formula $d_{i}-o\left(i\right),\ i<h$
\end_inset

.
 Cuando ninguno de los casos sea aplicable, veremos que 
\begin_inset Formula $d_{h}=o\left(h\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Los casos son:
\end_layout

\begin_layout Enumerate
Supongamos que 
\begin_inset Formula $\exists i\notin N\left(h\right):o\left(i\right)<d_{i}$
\end_inset

, entonces hacemos
\begin_inset Formula 
\[
E^{S}:=E^{S}\cup\left\{ \left(i,h\right)\right\} 
\]

\end_inset


\end_layout

\begin_layout Enumerate
Supongamos que 
\begin_inset Formula $\exists i<h:i\notin N\left(h\right)$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
o\left(i\right)=d_{i}\geq d_{h}>o\left(h\right)\implies\exists v\in N\left(i\right):v\notin N\left(h\right)
\]

\end_inset

 y se pueden dar dos subcasos:
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $d_{h}-o\left(h\right)\geq2$
\end_inset

, hacemos
\begin_inset Formula 
\[
E^{S}:=\left(E^{S}\setminus\left\{ \left(i,v\right)\right\} \right)\cup\left\{ \left(i,h\right),\left(v,h\right)\right\} 
\]

\end_inset

 
\begin_inset Graphics
	filename pegado2.png
	scale 60

\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $d_{h}-o\left(h\right)=1$
\end_inset

, como 
\begin_inset Formula $\sum_{i=1}^{n}d_{i}$
\end_inset

 es par por hipótesis y 
\begin_inset Formula $\sum_{i=1}^{n}o\left(i\right)$
\end_inset

 es par por ser un subgrafo, entonces 
\begin_inset Formula $\sum_{i=1}^{n}d_{i}-\sum_{i=1}^{n}o\left(i\right)$
\end_inset

 es par, y se tiene que 
\begin_inset Formula 
\[
\exists k>h:d_{k}>o\left(k\right)
\]

\end_inset

 y obtenemos dos nuevos subcasos:
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $k\notin N\left(h\right)\implies$
\end_inset

Caso 1
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $k\in N\left(h\right)$
\end_inset

, hacemos
\begin_inset Formula 
\[
E^{S}:=E^{S}\setminus\left\{ \left(i,v\right),\left(h,k\right)\right\} \cup\left\{ \left(i,h\right),\left(v,h\right)\right\} 
\]

\end_inset

 
\begin_inset Graphics
	filename pegado3.png
	scale 60

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
\begin_inset Formula $1,...,h-1\in N\left(h\right)$
\end_inset

 y 
\begin_inset Formula $\exists k>h$
\end_inset

 tal que 
\begin_inset Formula $o\left(k\right)\neq\min\left\{ d_{k},h\right\} $
\end_inset

.
 Entonces 
\begin_inset Formula $o\left(k\right)\leq d_{k}$
\end_inset

, porque 
\begin_inset Formula $G^{S}$
\end_inset

 es subrealización y 
\begin_inset Formula $o\left(k\right)\leq h$
\end_inset

 porque 
\begin_inset Formula $X=\left\{ h+1,...,n\right\} $
\end_inset

 es independiente, como se ilustra:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename pegado4.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
Además, 
\begin_inset Formula $o\left(k\right)<h$
\end_inset

 pues 
\begin_inset Formula $o\left(k\right)\neq\min\left\{ d_{k},h\right\} $
\end_inset

 por hipótesis del caso 3.
\end_layout

\begin_layout Standard
Surgen dos subcasos:
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $k\notin N\left(h\right)\implies$
\end_inset

Paso 1
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $k\in N\left(h\right)$
\end_inset

, entonces 
\begin_inset Formula $o\left(h\right)\geq h$
\end_inset

 pues por hipótesis del caso 3, 
\begin_inset Formula $h$
\end_inset

 está conectado con los 
\begin_inset Formula $h-1$
\end_inset

 nodos anteriores, y ahora con el 
\begin_inset Formula $k$
\end_inset

.
 O sea
\begin_inset Formula 
\[
o\left(h\right)\geq h>o\left(k\right)
\]

\end_inset

 Por tanto, 
\begin_inset Formula $\exists i<h:i\notin N\left(k\right)$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
Además, 
\begin_inset Formula $o\left(i\right)=d_{i}\geq d_{h}>o\left(h\right)$
\end_inset

 por lo que 
\begin_inset Formula $\exists u\in N\left(i\right):u\notin N\left(h\right)$
\end_inset

.
 Hacemos
\begin_inset Formula 
\[
E^{S}:=E^{S}\setminus\left\{ \left(i,u\right)\right\} \cup\left\{ \left(i,k\right),\left(h,u\right)\right\} 
\]

\end_inset


\begin_inset Graphics
	filename pegado5.png
	scale 60

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Supongamos que 
\begin_inset Formula $1,...,h-1\in N\left(h\right)$
\end_inset

 y 
\begin_inset Formula $\exists i,j<h:\left(i,j\right)\notin E^{S}$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
o\left(i\right)=d_{i}\geq d_{h}>o\left(h\right)\implies\exists u\in N\left(i\right)\setminus N\left(h\right)
\]

\end_inset


\begin_inset Formula 
\[
o\left(j\right)=d_{j}\geq d_{h}>o\left(h\right)\implies\exists w\in N\left(j\right)\setminus N\left(h\right)
\]

\end_inset

 hacemos
\begin_inset Formula 
\[
E^{S}:=E^{S}\setminus\left\{ \left(i,u\right),\left(j,w\right)\right\} \cup\left\{ \left(i,j\right),\left(u,h\right)\right\} 
\]

\end_inset

 
\begin_inset Graphics
	filename pegado6.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
|————————————————————————————————————————————————————————|
\end_layout

\begin_layout Standard
Supongamos ahora que no se da ninguno de los casos 1-4.
\end_layout

\begin_layout Itemize
Si no se da 2, entonces todos los nodos conectan al 
\begin_inset Formula $v_{h}$
\end_inset


\end_layout

\begin_layout Itemize
Si no se da 4, entonces todos los nodos entre 
\begin_inset Formula $1$
\end_inset

 y 
\begin_inset Formula $h-1$
\end_inset

 están conectados entre sí.
 O sea, el subgrafo inducido por 
\begin_inset Formula $\left\{ 1,...,h\right\} $
\end_inset

 es completo.
\end_layout

\begin_layout Itemize
Si no se da 3, 
\begin_inset Formula $\forall k>h,\ o\left(k\right)=\min\left\{ h,d_{k}\right\} $
\end_inset

, entonces
\begin_inset Formula 
\[
\sum_{i=1}^{h}o\left(i\right)=h\left(h-1\right)+\sum_{i=h+1}^{n}o\left(i\right)\overset{*}{=}h\left(h-1\right)+\sum_{i=h+1}^{n}\min\left\{ h,d_{i}\right\} \overset{**}{\geq}\sum_{i=1}^{h}d_{i}\implies o\left(h\right)=d_{h}
\]

\end_inset

 donde 
\begin_inset Formula $*$
\end_inset

 se debe a que 
\begin_inset Formula $X$
\end_inset

 es independiente, por lo que 
\begin_inset Formula $\forall i>h,\ o\left(i\right)$
\end_inset

 se corresponde con el número de conexiones con 
\begin_inset Formula $\left\{ 1,...,h\right\} $
\end_inset

, y 
\begin_inset Formula $**$
\end_inset

 es por hipótesis.
\end_layout

\begin_deeper
\begin_layout Standard
Así, obtenemos que 
\begin_inset Formula $d$
\end_inset

 ya no es índice crítico, por lo que avanzaríamos el paso.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
Havel y Hakimi
\end_layout

\begin_layout Theorem
Sea 
\begin_inset Formula $S=\left(d_{1},...,d_{n}\right)$
\end_inset

 una secuencia decreciente de enteros no negativos con 
\begin_inset Formula $n\geq2$
\end_inset

 y 
\begin_inset Formula $d_{i}\geq1$
\end_inset

.
 Entonces, 
\begin_inset Formula $S$
\end_inset

 es una secuencia gráfica si, y solo si, la secuencia
\begin_inset Formula 
\[
S'=\left(d_{2}-1,d_{3}-1,...,d_{d_{1}+1}-1,d_{d_{1}+2},...,d_{n}\right)
\]

\end_inset

es gráfica
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 
\begin_inset Formula $S'$
\end_inset

 gráfica 
\begin_inset Formula $\implies\exists G'=\left(V',E'\right),\ V'=\left\{ 2,...,n\right\} $
\end_inset

 cuya secuencia de grados es 
\begin_inset Formula $S'$
\end_inset

.
 Añadimos un nuevo nodo llamado 
\begin_inset Formula $1$
\end_inset

 y lo conectamos con 
\begin_inset Formula $\left\{ 2,...,d_{1}+1\right\} $
\end_inset

, obteniendo un grafo 
\begin_inset Formula $G$
\end_inset

 con secuencia de grados 
\begin_inset Formula $S$
\end_inset

, luego 
\begin_inset Formula $S$
\end_inset

 es gráfica.
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $S$
\end_inset

 es gráfica.
 Sea 
\begin_inset Formula $G$
\end_inset

 tal que 
\begin_inset Formula $S$
\end_inset

 es secuencia de grados de 
\begin_inset Formula $G$
\end_inset

 y 
\begin_inset Formula $\sum_{j\in N\left(1\right)}d_{j}$
\end_inset

 es máxima.
\end_layout

\begin_layout Proof
Afirmamos que 
\begin_inset Formula $1$
\end_inset

 es adyacente a nodos de grados 
\begin_inset Formula $d_{2},...,d_{d_{1}+1}$
\end_inset

.
\end_layout

\begin_layout Proof
Supongamos que no es así.
 Entonces, como 
\begin_inset Formula $o\left(1\right)=d_{1},$
\end_inset

 existirían 
\begin_inset Formula $i<j$
\end_inset

 tales que
\begin_inset Formula 
\[
j\in N\left(1\right),\ i\notin N\left(1\right),\ o\left(i\right)=d_{i}>d_{j}=o\left(j\right)
\]

\end_inset

 Como 
\begin_inset Formula $o\left(i\right)>o\left(j\right)\implies\exists k\in N\left(i\right)\setminus N\left(j\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Consideremos 
\begin_inset Formula $\overline{G}=\left(V,\overline{E}\right)$
\end_inset

 donde 
\begin_inset Formula $\overline{E}=E\setminus\left\{ \left(1,j\right),\left(i,k\right)\right\} \cup\left\{ \left(1,i\right),\left(k,j\right)\right\} $
\end_inset

:
\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado7.png
	scale 60

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\overline{G}$
\end_inset

 tiene secuencia de grados 
\begin_inset Formula $S$
\end_inset

 y 
\begin_inset Formula $\sum_{j\in\overline{N}\left(1\right)}d_{j}>\sum_{j\in N\left(1\right)}d_{j}$
\end_inset

# lo que contradice la maximalidad de 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Proof
Por tanto, en 
\begin_inset Formula $G$
\end_inset

, 1 es adyacente a nodos de grados 
\begin_inset Formula $\left\{ d_{2},...,d_{d_{1}+1}\right\} $
\end_inset

.
\end_layout

\begin_layout Proof
Haciendo 
\begin_inset Formula $G'=G\setminus\left\{ 1\right\} $
\end_inset

 obtenemos un grafo de orden 
\begin_inset Formula $n-1$
\end_inset

 y secuencia 
\begin_inset Formula $S'$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Havel-Hakimi
\end_layout

\begin_layout Plain Layout
Dada una secuencia decreciente de enteros no negativos 
\begin_inset Formula $S=\left(d_{1},...,d_{n}\right)$
\end_inset

 que queremos saber si es secuencia gráfica:
\end_layout

\begin_layout Plain Layout
1) Si 
\begin_inset Formula $\sum d_{i}$
\end_inset

 es impar 
\begin_inset Formula $\implies$
\end_inset

 FIN, no es secuencia gráfica
\end_layout

\begin_layout Plain Layout
Si 
\begin_inset Formula $\max\left(d_{i}\right)=0\implies$
\end_inset

FIN, es secuencia gráfica
\end_layout

\begin_layout Plain Layout
Si no, ir a 2)
\end_layout

\begin_layout Plain Layout
2) Si 
\begin_inset Formula $S=\left(d_{1},...,d_{n}\right)$
\end_inset

, hacer 
\begin_inset Formula $S=\left(d_{2}-1,d_{3}-1,...,d_{d_{1}+1}-1,d_{d_{1}+2},...,d_{n}\right)$
\end_inset

 y volver a 1)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Caminos y ciclos
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

, un 
\series bold
paseo
\series default
 que une 
\begin_inset Formula $v_{0}$
\end_inset

 y 
\begin_inset Formula $v_{k}$
\end_inset

 de 
\begin_inset Formula $V$
\end_inset

 es una secuencia de la forma
\begin_inset Formula 
\[
v_{0}e_{1}v_{1}e_{2}...v_{k-1}e_{k}v_{k}
\]

\end_inset

 donde cada 
\begin_inset Formula $e_{i}\in E$
\end_inset

 es un eje incidente a 
\begin_inset Formula $v_{i-1}$
\end_inset

 y 
\begin_inset Formula $v_{i}$
\end_inset

.
\end_layout

\begin_layout Definition
La 
\series bold
longitud del paseo
\series default
 es el número de ejes, 
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout Definition
Si 
\begin_inset Formula $v_{0}=v_{k}$
\end_inset

, el paseo se dice que es 
\series bold
cerrado
\end_layout

\begin_layout Definition
Si todos los ejes son distintos el paseo se dice 
\series bold
simple
\end_layout

\begin_layout Definition
Un paseo simple en el que todos los nodos intermedios son distintos se denomina
 
\series bold
camino
\end_layout

\begin_layout Definition
Un camino cerrado se denomina 
\series bold
ciclo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Todo paseo entre dos vértices contiene un camino entre dichos vértices
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Sea el paseo 
\begin_inset Formula $v_{1}...v_{k}$
\end_inset

.
\end_layout

\begin_layout Proof
Si es un camino, fin.
\end_layout

\begin_layout Proof
Si no es un camino, entonces 
\begin_inset Formula $\exists w\in V$
\end_inset

 tal que el camino puede escribirse como
\begin_inset Formula 
\[
v_{1}...w...w...v_{k}
\]

\end_inset

 Llamamos 
\begin_inset Formula $\gamma=w...w$
\end_inset

 el paseo interior que une 
\begin_inset Formula $w$
\end_inset

 consigo mismo y lo eliminamos del paseo original, quedando
\begin_inset Formula 
\[
v_{1}...w...v_{k}
\]

\end_inset

 Reiterando esto hasta que no quede ningún 
\begin_inset Formula $w$
\end_inset

 de esta forma, lo tenemos.
\end_layout

\begin_layout Proof
Y esto sucede en algún momento, pues el paseo es finito.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Cualquier paseo cerrado de longitud impar contiene un ciclo
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Sea un paseo cerrado 
\begin_inset Formula $v=v_{1}...w...w...v_{k}=v$
\end_inset

, donde 
\begin_inset Formula $w$
\end_inset

 está ahí así porque el paseo cerrado no es un camino cerrado, si lo fuera
 sería un ciclo.
\end_layout

\begin_layout Proof
Si no es un ciclo, podemos reordenar el paseo, expresándolo como
\begin_inset Formula 
\[
w...v_{1}...wu...v_{k}...w
\]

\end_inset

 Hacemos ahora 
\begin_inset Formula $a=w...v_{1}...w,\ b=u...v_{k}...w$
\end_inset

.
\end_layout

\begin_layout Proof
Como el paseo es de longitud impar, entonces 
\begin_inset Formula $a$
\end_inset

 o 
\begin_inset Formula $b$
\end_inset

 es de longitud impar.
 Tomamos el que sea de longitud impar.
 Si es un ciclo, fin.
 Si no es un ciclo, repetimos el proceso.
\end_layout

\begin_layout Proof
Al final se llega a un ciclo (el paseo es finito), como mínimo, de longitud
 3 (pues ha de ser impar y un ciclo tiene longitud al menos 2)
\end_layout

\begin_layout Subsection
Representaciones matriciales de grafos
\end_layout

\begin_layout Subsubsection
Matriz de adyacencia
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo no dirigido con 
\begin_inset Formula $V=\left\{ 1,...,n\right\} $
\end_inset

.
 La 
\series bold
matriz de adyacencia
\series default
 
\begin_inset Formula $A=\left(a_{ij}\right)$
\end_inset

 es la matriz cuadrada de orden 
\begin_inset Formula $n$
\end_inset

 definida como
\begin_inset Formula 
\[
a_{ij}=\begin{cases}
1 & si\ \left(i,j\right)\in E\\
0 & en\ otro\ caso
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Sea A la matriz de adyacencia de un grafo no dirigido G.
 
\end_layout

\begin_layout Theorem
Para cada 
\begin_inset Formula $k\geq1$
\end_inset

 entero, la matriz 
\begin_inset Formula $A^{k}$
\end_inset

 representa la cantidad de paseos de longitud 
\begin_inset Formula $k$
\end_inset

 que hay entre cada par de vértices
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Por inducción:
\end_layout

\begin_layout Proof
Para 
\begin_inset Formula $k=1$
\end_inset

, se verifica por definición de matriz de adyacencia.
\end_layout

\begin_layout Proof
Supongamos que se verifica para 
\begin_inset Formula $k-1$
\end_inset

 y la hipótesis de inducción.
\end_layout

\begin_layout Proof
Entonces
\begin_inset Formula 
\[
A^{k}=A\cdot A^{k-1}
\]

\end_inset

 es decir
\begin_inset Formula 
\[
\left(A^{k}\right)_{ij}=\sum_{h=1}^{n}a_{ih}a_{hj}^{\left[k-1\right]}
\]

\end_inset

 Donde 
\begin_inset Formula $a_{ih}$
\end_inset

 indica la cantidad de paseos de 
\begin_inset Formula $i$
\end_inset

 a 
\begin_inset Formula $h$
\end_inset

 de longitud 
\begin_inset Formula $1$
\end_inset

 (caso 
\begin_inset Formula $k=1$
\end_inset

) y 
\begin_inset Formula $a_{hj}^{\left[k-1\right]}$
\end_inset

 la cantidad de paseos de 
\begin_inset Formula $h$
\end_inset

 a 
\begin_inset Formula $j$
\end_inset

 de tamaño 
\begin_inset Formula $k-1$
\end_inset

 (por la hipótesis de inducción).
 Por tanto, su multiplicación representa la cantidad de paseos de 
\begin_inset Formula $i$
\end_inset

 a 
\begin_inset Formula $j$
\end_inset

 que pasan por 
\begin_inset Formula $h$
\end_inset

.
 Y la suma en 
\begin_inset Formula $h$
\end_inset

 de estas cantidades nos da la cantidad total de paseos desde 
\begin_inset Formula $i$
\end_inset

 hasta 
\begin_inset Formula $j$
\end_inset

, lo que prueba el enunciado.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Conectividad en grafos
\end_layout

\begin_layout Subsection
Conexión.
 Componentes conexas
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

, dos vértices 
\begin_inset Formula $u,v\in V$
\end_inset

 se dice que están 
\series bold
conectados
\series default
 si existe un camino uniendo los vértices 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Definition
Un grafo es 
\series bold
conexo
\series default
 si cada par de vértices están conectados entre sí, en caso contrario se
 dice 
\series bold
disconexo
\series default
.
 El grafo trivial se considera conexo.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 y 
\begin_inset Formula $V'\subset V$
\end_inset

, el subgrafo inducido 
\begin_inset Formula $G_{V'}$
\end_inset

 es una 
\series bold
componente conexa
\series default
 de 
\begin_inset Formula $G$
\end_inset

 si:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $G_{V'}$
\end_inset

 es conexo
\end_layout

\begin_layout Itemize
\begin_inset Formula $V'$
\end_inset

 es maximal verificando la condición anterior
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
Obsérvese que un grafo es conexo si solo tiene una componente conexa.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo de orden 
\begin_inset Formula $n$
\end_inset

 y tamaño 
\begin_inset Formula $m$
\end_inset

.
 Si 
\begin_inset Formula $G$
\end_inset

 es un grafo conexo, entonces 
\begin_inset Formula $m\geq n-1$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Un grafo conexo tiene una componente conexa.
 Comenzamos con el grafo con los nodos y sin ejes
\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado8.png

\end_inset


\end_layout

\begin_layout Proof
Cada eje que añadimos, a lo sumo elimina una componente conexa, cuando al
 añadirlo une dos componentes conexas distintas.
\end_layout

\begin_layout Proof
Como partimos de 
\begin_inset Formula $n$
\end_inset

 componentes conexas, necesitamos, como mínimo, añadir 
\begin_inset Formula $n-1$
\end_inset

 ejes
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo conexo de orden 
\begin_inset Formula $n$
\end_inset

.
 Sean 
\begin_inset Formula $u,v\in V$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Un camino entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 de longitud mínima se dice que es una 
\series bold
geodésica
\series default
 entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset


\end_layout

\begin_layout Itemize
Se define la 
\series bold
distancia 
\series default
entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

, 
\begin_inset Formula $d\left(u,v\right)$
\end_inset

 como la longitud de cualquier geodésica entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset


\end_layout

\begin_layout Itemize
Se define el 
\series bold
diámetro 
\series default
de 
\begin_inset Formula $G$
\end_inset

, 
\begin_inset Formula $diam\left(G\right)$
\end_inset

, como el máximo de las distancias entre todos los pares de vértices
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo de orden al menos 3.
 
\begin_inset Formula $G$
\end_inset

 es conexo si, y solo si, contiene dos vértices 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 tales que 
\begin_inset Formula $G-u$
\end_inset

 y 
\begin_inset Formula $G-v$
\end_inset

 son conexos
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Nota:
\series default
 
\begin_inset Formula $G-u$
\end_inset

 es el grafo inducido por 
\begin_inset Formula $V\setminus\left\{ u\right\} $
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Demostraremos que para cada par de vértices 
\begin_inset Formula $i,j\in V$
\end_inset

, existe un paseo entre ellos.
\end_layout

\begin_deeper
\begin_layout Itemize
Si 
\begin_inset Formula $\left\{ i,j\right\} \neq\left\{ u,v\right\} $
\end_inset

, podemos suponer que ambos son distintos de 
\begin_inset Formula $u$
\end_inset

.
 Como 
\begin_inset Formula $G-u$
\end_inset

 es conexo, entonces 
\begin_inset Formula $i,j$
\end_inset

 están conectados en 
\begin_inset Formula $G-u\implies$
\end_inset

están conectados en 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $\left\{ i,j\right\} =\left\{ u,v\right\} $
\end_inset

, como 
\begin_inset Formula $n\geq3\implies\exists w\neq u,v$
\end_inset

.
 Como 
\begin_inset Formula $G-u$
\end_inset

 es conexo, existe un camino 
\begin_inset Formula $P_{1}$
\end_inset

 entre 
\begin_inset Formula $w$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 en 
\begin_inset Formula $G-u$
\end_inset

.
 Análogamente, existe un camino 
\begin_inset Formula $P_{2}$
\end_inset

 entre 
\begin_inset Formula $w$
\end_inset

 y 
\begin_inset Formula $u$
\end_inset

 en 
\begin_inset Formula $G-v$
\end_inset

.
 Concatenando 
\begin_inset Formula $-P_{1}$
\end_inset

 con 
\begin_inset Formula $P_{2}$
\end_inset

 obtenemos un camino entre 
\begin_inset Formula $v$
\end_inset

 y 
\begin_inset Formula $u$
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 es conexo.
 Sean 
\begin_inset Formula $u,v\in V$
\end_inset

 tales que 
\begin_inset Formula $d\left(u,v\right)=diam\left(G\right)$
\end_inset

, ¿
\begin_inset Formula $G-u,\ G-v$
\end_inset

 conexos? 
\end_layout

\begin_layout Proof
Lo vemos para 
\begin_inset Formula $G-u$
\end_inset

:
\end_layout

\begin_layout Proof
Dados 
\begin_inset Formula $i,j\neq u$
\end_inset

, como 
\begin_inset Formula $G$
\end_inset

 es conexo, tenemos que 
\begin_inset Formula $i,v$
\end_inset

 están conectados en 
\begin_inset Formula $G$
\end_inset

 y 
\begin_inset Formula $v,j$
\end_inset

 también.
\end_layout

\begin_layout Proof
Consideremos 
\begin_inset Formula $P_{1}$
\end_inset

 la geodésica entre 
\begin_inset Formula $i,v$
\end_inset

, entonces 
\begin_inset Formula $u\notin P_{1}$
\end_inset

, ya que, si fuera 
\begin_inset Formula $u\in P_{1}$
\end_inset

, entonces sería 
\begin_inset Formula $d\left(i,v\right)>d\left(u,v\right)=diam\left(G\right)\#$
\end_inset


\end_layout

\begin_layout Proof
De igual forma, consideramos 
\begin_inset Formula $P_{2}$
\end_inset

 la geodésica entre 
\begin_inset Formula $v,j$
\end_inset

 y se tiene 
\begin_inset Formula $u\notin P_{2}$
\end_inset

 por la misma razón que antes.
\end_layout

\begin_layout Proof
Así, 
\begin_inset Formula $P_{1}P_{2}$
\end_inset

 es un paseo de 
\begin_inset Formula $i$
\end_inset

 a 
\begin_inset Formula $j$
\end_inset

 en 
\begin_inset Formula $G-u$
\end_inset

, y este es conexo.
\end_layout

\begin_layout Proof
De igual forma para 
\begin_inset Formula $G-v$
\end_inset


\end_layout

\begin_layout Subsection
Obtención de las componentes conexas
\end_layout

\begin_layout Subsubsection
Mediante las potencias de la matriz de adyacencia
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Sea A la matriz de adyacencia de un grafo G.
 Consideremos 
\begin_inset Formula 
\[
\overline{A}=\sum_{k=1}^{n-1}A^{k}
\]

\end_inset

 Los nodos 
\begin_inset Formula $i,j$
\end_inset

 están en la misma componente conexa si, y solo si, 
\begin_inset Formula $\overline{a}_{ij}>0$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Nótese que 
\begin_inset Formula $d\left(i,j\right)\leq n-1$
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 Si 
\begin_inset Formula $i,j$
\end_inset

 están en la misma componente conexa, existe un paseo que los conecta.
 Si el paseo tiene longitud 
\begin_inset Formula $k\leq n-1$
\end_inset

, se tendrá 
\begin_inset Formula $a_{ij}^{\left[k\right]}\geq1\implies\overline{a}_{ij}>0$
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Si 
\begin_inset Formula $\overline{a}_{ij}>0$
\end_inset

, entonces para algún 
\begin_inset Formula $k\leq n-1$
\end_inset

, se tiene 
\begin_inset Formula $a_{ij}^{\left[k\right]}>0$
\end_inset

, luego 
\begin_inset Formula $i,j$
\end_inset

 están conectados, y deben estar en la misma componente conexa
\end_layout

\begin_layout Subsubsection
Breadth-first search - Búsqueda primero en anchura
\end_layout

\begin_layout Standard
Se recorre el grafo comenzando en un nodo, y recorriendo todos sus vecinos.
 Luego se recorren los vecinos de sus vecinos, etc
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pegado9.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo BFS para computar el número de componentes conexas
\end_layout

\begin_layout Plain Layout
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo simple
\end_layout

\begin_layout Plain Layout

\series bold
Paso inicial
\end_layout

\begin_layout Itemize
\begin_inset Formula $X=\emptyset$
\end_inset

 es el conjunto de nodos visitados
\end_layout

\begin_layout Itemize
\begin_inset Formula $h=1$
\end_inset

, el índice de las componentes conexas
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Itemize
Tomamos 
\begin_inset Formula $v\in V\setminus X$
\end_inset


\end_layout

\begin_layout Itemize
Hacemos 
\begin_inset Formula $C\left(h\right)=\left\{ v\right\} ,\ r_{h}=v$
\end_inset


\end_layout

\begin_layout Itemize
Tomamos 
\begin_inset Formula $i\left(v\right)=0,\ i=0$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Itemize
Tomamos 
\begin_inset Formula $u\in C\left(h\right)\setminus X$
\end_inset

 con 
\begin_inset Formula $i\left(u\right)=i$
\end_inset

.
 Si no existe tal nodo, ir al Paso 4
\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Itemize
Para todo 
\begin_inset Formula $w\in N\left(u\right)\setminus C\left(h\right),$
\end_inset

 hacemos 
\begin_inset Formula $i\left(w\right)=i\left(u\right)+1,\ C\left(h\right)=C\left(h\right)\cup\left\{ w\right\} $
\end_inset

, 
\begin_inset Formula $X=X\cup\left\{ u\right\} $
\end_inset

.
 Volver al Paso 2
\end_layout

\begin_layout Plain Layout

\series bold
Paso 4
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $C\left(h\right)\subset X$
\end_inset

, hemos completado la componente 
\begin_inset Formula $C\left(h\right)$
\end_inset

.
 Para cada 
\begin_inset Formula $u\in C\left(h\right),\ i\left(u\right)=d\left(r_{h},u\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Si 
\begin_inset Formula $X=V$
\end_inset

, FIN.
 Se han encontrado todas las componentes conexas.
\end_layout

\begin_layout Itemize
Si no, hacer 
\begin_inset Formula $h=h+1$
\end_inset

 e ir al Paso 1
\end_layout

\end_deeper
\begin_layout Itemize
Si no, hacer 
\begin_inset Formula $i=i+1$
\end_inset

 e ir al Paso 2
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Depth-first search - Búsqueda primero en profundidad
\end_layout

\begin_layout Standard
Se recorre un grafo eligiendo un nodo, y se exploran sucesivamente nodos
 adyacentes al nodo anterior que no hayan sido previamente explorados.
 Cuando un nodo no tiene nodos adyacentes que no hayan sido explorados se
 vuelve a su predecesor y se continúa el procedimiento explorando otro nodo
 adyacente a este que no haya sido previamente explorado.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pegado10.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo DFS para computar el número de componentes conexas
\end_layout

\begin_layout Plain Layout
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo simple
\end_layout

\begin_layout Plain Layout

\series bold
Paso Inicial
\end_layout

\begin_layout Itemize
\begin_inset Formula $X=\emptyset$
\end_inset

 es el conjunto de nodos visitados
\end_layout

\begin_layout Itemize
\begin_inset Formula $h=1$
\end_inset

, el índice de las componentes conexas
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Itemize
Tomamos 
\begin_inset Formula $v\in V\setminus X$
\end_inset


\end_layout

\begin_layout Itemize
Hacemos 
\begin_inset Formula $C\left(h\right)=\left\{ v\right\} ,\ u=v,\ p\left(u\right)=v$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $N\left(u\right)\setminus\left\{ p\left(u\right)\right\} \subset X$
\end_inset

, hacemos 
\begin_inset Formula $X=X\cup\left\{ u\right\} $
\end_inset

 (el nodo 
\begin_inset Formula $u$
\end_inset

 ha sido completamente explorado).
 Ir al Paso 3
\end_layout

\begin_layout Itemize
Si no, sea 
\begin_inset Formula $w\in N\left(u\right)\setminus X$
\end_inset

, 
\begin_inset Formula $w\neq p\left(u\right)$
\end_inset

.
 Hacemos 
\begin_inset Formula $C\left(h\right)=C\left(h\right)\cup\left\{ w\right\} $
\end_inset

.
 Hacemos 
\begin_inset Formula $p\left(w\right)=u$
\end_inset

.
 Volver al Paso 2
\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $u=v$
\end_inset

, se ha completado la componente conexa 
\begin_inset Formula $C\left(h\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Si 
\begin_inset Formula $X=V$
\end_inset

, FIN.
 Se han encontrado todas las componentes conexas
\end_layout

\begin_layout Itemize
Si no, hacer 
\begin_inset Formula $h=h+1$
\end_inset

 e ir al Paso 1
\end_layout

\end_deeper
\begin_layout Itemize
Si 
\begin_inset Formula $u\neq v$
\end_inset

, hacer 
\begin_inset Formula $u=p\left(u\right)$
\end_inset

 y volver al paso 2
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Conjuntos separadores
\end_layout

\begin_layout Standard
Dado un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 y sean 
\begin_inset Formula $V'\subset V,\ E'\subset E$
\end_inset

.
 Denotamos por
\end_layout

\begin_layout Itemize
\begin_inset Formula $G-V'$
\end_inset

 al 
\series bold
subgrafo de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset

 inducido por 
\begin_inset Formula $\boldsymbol{V\setminus V'}$
\end_inset


\series default
, es decir, el resultante de eliminar todos los nodos de 
\begin_inset Formula $V'$
\end_inset

 y los ejes de 
\begin_inset Formula $E$
\end_inset

 incidentes a algún nodo de 
\begin_inset Formula $V'$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $G-E'$
\end_inset

 al 
\series bold
subgrafo generador de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset

 resultante de eliminar los ejes de 
\begin_inset Formula $\boldsymbol{E'}$
\end_inset


\end_layout

\begin_layout Subsubsection
Conjuntos separadores de vértices.
 Vértices de corte
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo conexo.
\end_layout

\begin_layout Itemize
Un conjunto de vértices 
\begin_inset Formula $V'\subset V$
\end_inset

 se dice que es un 
\series bold
conjunto separador de vértices
\series default
 de 
\begin_inset Formula $G$
\end_inset

 si 
\begin_inset Formula $G-V'$
\end_inset

 es disconexo.
\end_layout

\begin_deeper
\begin_layout Plain Layout
Si 
\begin_inset Formula $\left|V'\right|=k$
\end_inset

 se dice que es un conjunto 
\begin_inset Formula $k$
\end_inset

-separador
\end_layout

\end_deeper
\begin_layout Itemize
Un vértice 
\begin_inset Formula $v\in V$
\end_inset

 es un 
\series bold
vértice de corte 
\series default
de 
\begin_inset Formula $G$
\end_inset

 si 
\begin_inset Formula $\left\{ v\right\} $
\end_inset

 es un conjunto separador de vértices de 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo conexo de orden mayor o igual que 3.
\end_layout

\begin_layout Theorem
Un vértice 
\begin_inset Formula $u$
\end_inset

 es un vértice de corte de 
\begin_inset Formula $G$
\end_inset

 si, y solo si, existen dos vértices 
\begin_inset Formula $v,w$
\end_inset

 distintos de 
\begin_inset Formula $u$
\end_inset

 tales que cualquier camino de 
\begin_inset Formula $v$
\end_inset

 a 
\begin_inset Formula $w$
\end_inset

 pasa por 
\begin_inset Formula $u$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Si eliminamos 
\begin_inset Formula $u$
\end_inset

 rompemos todos los caminos de 
\begin_inset Formula $v$
\end_inset

 a 
\begin_inset Formula $w$
\end_inset

 en 
\begin_inset Formula $G-u\implies G-u$
\end_inset

 disconexo
\begin_inset Formula $\implies$
\end_inset


\begin_inset Formula $u$
\end_inset

 vértice de corte
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset


\begin_inset Formula $G-u$
\end_inset

 disconexo
\begin_inset Formula $\implies\exists i,j$
\end_inset

 no conectados en 
\begin_inset Formula $G-u$
\end_inset

.
\end_layout

\begin_layout Proof
Como 
\begin_inset Formula $i,j$
\end_inset

 están conectados en 
\begin_inset Formula $G$
\end_inset

 (conexo), si existiera un camino 
\begin_inset Formula $P$
\end_inset

 entre 
\begin_inset Formula $i$
\end_inset

 y 
\begin_inset Formula $j$
\end_inset

 que no pasa por 
\begin_inset Formula $u$
\end_inset

, al quitar 
\begin_inset Formula $u$
\end_inset

 ese camino no se vería alterado, por lo que 
\begin_inset Formula $i,j$
\end_inset

 seguirían conectados en 
\begin_inset Formula $G-u$
\end_inset

.
\end_layout

\begin_layout Proof
Esto quiere decir que para todo camino 
\begin_inset Formula $P$
\end_inset

 entre 
\begin_inset Formula $i$
\end_inset

 y 
\begin_inset Formula $j$
\end_inset

, 
\begin_inset Formula $P$
\end_inset

 debe pasar por 
\begin_inset Formula $u$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Un grafo conexo con al menos dos vértices contiene al menos dos vértices
 que no son vértices de corte
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Es un corolario del teorema 2.5
\end_layout

\begin_layout Proof
\begin_inset Formula $G$
\end_inset

 conexo
\begin_inset Formula $\implies$
\end_inset

hay dos nodos 
\begin_inset Formula $u,v$
\end_inset

 tales que 
\begin_inset Formula $G-u$
\end_inset

 y 
\begin_inset Formula $G-v$
\end_inset

 son conexos
\begin_inset Formula $\implies$
\end_inset


\begin_inset Formula $u,v$
\end_inset

 no son vértices de corte
\end_layout

\begin_layout Subsubsection
Conjuntos separadores de ejes.
 Puentes
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo no dirigido, y sea 
\begin_inset Formula $\emptyset\neq V'\subsetneq V$
\end_inset

.
\end_layout

\begin_layout Definition
Denotamos por 
\begin_inset Formula $\left[V',V\setminus V'\right]$
\end_inset

 al conjunto de ejes de 
\begin_inset Formula $E$
\end_inset

 que son incidentes a un vértice de 
\begin_inset Formula $V'$
\end_inset

 y otro de 
\begin_inset Formula $V\setminus V'$
\end_inset

.
 Estos conjuntos de ejes se denominan 
\series bold
corte
\series default
.
\end_layout

\begin_layout Definition
Un corte de cardinal 
\begin_inset Formula $k$
\end_inset

 se denomina 
\begin_inset Formula $\boldsymbol{k-}$
\end_inset


\series bold
corte
\end_layout

\begin_layout Definition
Un eje 
\begin_inset Formula $e$
\end_inset

 se dice que es un 
\series bold
eje de corte 
\series default
si 
\begin_inset Formula $\left\{ e\right\} $
\end_inset

 es un corte
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo conexo.
\end_layout

\begin_layout Definition
Un conjunto de ejes 
\begin_inset Formula $E'\subset E$
\end_inset

 se dice que es un 
\series bold
conjunto separador de ejes
\series default
 de 
\begin_inset Formula $G$
\end_inset

 si 
\begin_inset Formula $G-E'$
\end_inset

 es disconexo
\end_layout

\begin_layout Definition
Un eje 
\begin_inset Formula $e$
\end_inset

 se dice que es un 
\series bold
puente
\series default
 si 
\begin_inset Formula $\left\{ e\right\} $
\end_inset

 es un conjunto separador de ejes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Todo corte es un conjunto separador de ejes
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Tomamos 
\begin_inset Formula $E'=\left[S,V\setminus S\right]$
\end_inset

.
 En 
\begin_inset Formula $G-E'$
\end_inset

, 
\begin_inset Formula $S$
\end_inset

 y 
\begin_inset Formula $V\setminus S$
\end_inset

 no están conectados.
\end_layout

\begin_layout Standard
Nótese que el recíproco no es cierto, ya que un conjunto separador de ejes
 puede tener más ejes de los necesarios.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Todo conjunto separador de ejes contiene un corte
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Si 
\begin_inset Formula $E'$
\end_inset

 es un conjunto separador de ejes, entonces 
\begin_inset Formula $G-E'$
\end_inset

 es disconexo.
\end_layout

\begin_layout Proof
Sea 
\begin_inset Formula $V_{1}$
\end_inset

 una componente conexa de 
\begin_inset Formula $G-E'$
\end_inset

, entonces 
\begin_inset Formula $\left[V_{1},V\setminus V_{1}\right]$
\end_inset

 es un corte de 
\begin_inset Formula $G$
\end_inset

 contenido en 
\begin_inset Formula $E'$
\end_inset


\end_layout

\begin_layout Standard
Como consecuencia de estos dos resultados, los conceptos de puente y eje
 de corte son equivalentes.
\end_layout

\begin_layout Standard
Además, obsérvese que si 
\begin_inset Formula $e$
\end_inset

 es un puente, entonces 
\begin_inset Formula $G-e$
\end_inset

 tiene exactamente dos componentes conexas.
 Sin embargo, un corte puede dar lugar a más componentes conexas.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un corte 
\begin_inset Formula $X$
\end_inset

 de un grafo conexo 
\begin_inset Formula $G$
\end_inset

 es 
\series bold
minimal
\series default
 si no existe 
\begin_inset Formula $Y\subset X$
\end_inset

 tal que 
\begin_inset Formula $Y$
\end_inset

 es un corte de 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Definition
Un 
\series bold
corte mínimo
\series default
 de un grafo 
\begin_inset Formula $G$
\end_inset

 es un corte cuyo cardinal es mínimo entre todos los cortes de 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Si 
\begin_inset Formula $X$
\end_inset

 es un corte minimal de un grafo conexo 
\begin_inset Formula $G$
\end_inset

, entonces 
\begin_inset Formula $G-X$
\end_inset

 tiene exactamente dos componentes conexas
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Si tiene más de dos componentes conexas, entonces existe un eje 
\begin_inset Formula $e=\left(i,j\right)$
\end_inset

 con 
\begin_inset Formula $i\in S,\ j\in V\setminus S$
\end_inset

 de forma que al añadir ese eje, eliminamos una componente conexa, pero
 el grafo seguiría siendo disconexo.
 Por tanto, el corte
\begin_inset Formula $\left[S\cup\left\{ j\right\} ,V\setminus\left(S\cup\left\{ j\right\} \right)\right]$
\end_inset

 está contenido estrictamente en el corte inicial, y este no es minimal.
\end_layout

\begin_layout Standard
Vamos ahora a ver una serie de resultados que caracterizan los puentes de
 un grafo conexo.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo conexo.
 Un eje e es un puente de G si, y solo si, existen vértices u y v tales
 que e está contenido en cualquier camino de u a v en G
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $e=\left(u,v\right)$
\end_inset

 es un puente.
 Supongamos que existe un camino 
\begin_inset Formula $P$
\end_inset

 conectando 
\begin_inset Formula $u,v$
\end_inset

 tal que 
\begin_inset Formula $e\notin P$
\end_inset

.
 En tal caso, al quitar 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 siguen eoncetados por 
\begin_inset Formula $P$
\end_inset

, por lo que 
\begin_inset Formula $G-e$
\end_inset

 sigue siendo conexo#
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 De ser así, al eliminar 
\begin_inset Formula $e$
\end_inset

 se rompen todos los cmainos entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

.
 En 
\begin_inset Formula $G-e$
\end_inset

, 
\begin_inset Formula $u,v$
\end_inset

 no están conectados, por lo que 
\begin_inset Formula $G-e$
\end_inset

 es disconexo y 
\begin_inset Formula $e$
\end_inset

 es un puente
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Un eje e es un puente de un grafo conexo G si, y solo si, no pertenece a
 ningún ciclo de G
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 Si 
\begin_inset Formula $e$
\end_inset

 es un puente, entonces es un eje de corte
\end_layout

\begin_layout Proof
Si 
\begin_inset Formula $e$
\end_inset

 estuviera en un ciclo, habría, al menos, otro eje en el corte#
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $e=\left(u,v\right)$
\end_inset

 no es un puente.
 Entonces 
\begin_inset Formula $G-e$
\end_inset

 sería conexo.
 Por tanto, existe un camino 
\begin_inset Formula $P$
\end_inset

 conectando 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 con 
\begin_inset Formula $e\notin P$
\end_inset

, pero entonces 
\begin_inset Formula $P\cup\left\{ e\right\} $
\end_inset

 es un ciclo.
\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado11.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Corollary
Si G es un grafo simple conexo y sin ciclos, entonces cada eje es un puente
 de G
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Conectividad.
 
\begin_inset Formula $\boldsymbol{k}$
\end_inset

-conexión
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo conexo no completo.
 La 
\series bold
conectividad de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset


\series default
, 
\begin_inset Formula $\kappa\left(G\right)$
\end_inset

 es el menor índice 
\begin_inset Formula $k$
\end_inset

 para el que existe un conjunto 
\begin_inset Formula $k$
\end_inset

-separador de vértices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por convenio, si 
\begin_inset Formula $G$
\end_inset

 es disconexo o trivial, 
\begin_inset Formula $\kappa\left(G\right)=0$
\end_inset

.
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $G$
\end_inset

 es un grafo completo, 
\begin_inset Formula $\kappa\left(G\right)=n-1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un grafo se dice 
\begin_inset Formula $\boldsymbol{k}$
\end_inset


\series bold
-conexo
\series default
 si 
\begin_inset Formula $\kappa\left(G\right)\geq k$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo conexo.
 La 
\series bold
conectividad por ejes de 
\begin_inset Formula $\boldsymbol{G}$
\end_inset


\series default
, 
\begin_inset Formula $\lambda\left(G\right)$
\end_inset

 es el menor índice 
\begin_inset Formula $k$
\end_inset

 para el que existe un conjunto 
\begin_inset Formula $k$
\end_inset

-separador de ejes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por convenio, si 
\begin_inset Formula $G$
\end_inset

 es disconexo o trivial, 
\begin_inset Formula $\lambda\left(G\right)=0$
\end_inset

.
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $G$
\end_inset

 es conexo y tiene un puente, 
\begin_inset Formula $\lambda\left(G\right)=1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un grafo se dice 
\begin_inset Formula $\boldsymbol{k}$
\end_inset


\series bold
-conexo por ejes
\series default
 si 
\begin_inset Formula $\lambda\left(G\right)\geq k$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Dado 
\begin_inset Formula $n\geq1$
\end_inset

, se verifica 
\begin_inset Formula $\lambda\left(K_{n}\right)=n-1$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Para verlo:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\lambda\left(K_{n}\right)\leq n-1$
\end_inset

: sea 
\begin_inset Formula $E'$
\end_inset

 el conjunto de ejes incidentes a un nodo 
\begin_inset Formula $v\in V$
\end_inset

.
 Como 
\begin_inset Formula $o\left(v\right)=n-1,\ \forall v\in V$
\end_inset

, entonces 
\begin_inset Formula $\left|E'\right|=n-1$
\end_inset

 y 
\begin_inset Formula $G-E'$
\end_inset

 es disconexo.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\lambda\left(K_{n}\right)\geq n-1:$
\end_inset

 sea 
\begin_inset Formula $E'$
\end_inset

 un corte mínimo, 
\begin_inset Formula $E'=\left[V',V\setminus V'\right]$
\end_inset

, supongamos que 
\begin_inset Formula $\left|V'\right|=q$
\end_inset

, 
\begin_inset Formula $1\leq q\leq n-1$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Entonces, como estamos en 
\begin_inset Formula $K_{n}$
\end_inset

, todos los nodos de 
\begin_inset Formula $V'$
\end_inset

 conectan con todos los de 
\begin_inset Formula $V\setminus V'$
\end_inset

, luego 
\begin_inset Formula $\left|E'\right|=q\cdot\left(n-q\right)$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $q\geq1\implies\left(q-1\right)\geq0$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $q\leq n-1\implies\left(n-q-1\right)\geq0$
\end_inset


\end_layout

\begin_layout Standard
Por tanto
\begin_inset Formula 
\[
\left(q-1\right)\left(n-q-1\right)\geq0
\]

\end_inset

 por lo que es
\begin_inset Formula 
\[
q\left(n-q-1\right)-\left(n-q-1\right)\geq0\implies q\left(n-q\right)-q-\left(n-1\right)+q\geq0\implies
\]

\end_inset


\begin_inset Formula 
\[
\implies q\left(n-q\right)-\left(n-1\right)\geq0\implies q\left(n-q\right)\geq n-1\implies\left|E'\right|\geq n-1
\]

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Sea G un grafo conexo.
 Entonces
\begin_inset Formula 
\[
\kappa\left(G\right)\leq\lambda\left(G\right)\leq\delta\left(G\right)
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Vamos a ver primero que 
\begin_inset Formula $\lambda\left(G\right)\leq\delta\left(G\right)$
\end_inset

:
\end_layout

\begin_layout Proof
Sea 
\begin_inset Formula $v$
\end_inset

 tal que 
\begin_inset Formula $o\left(v\right)=\delta\left(G\right)$
\end_inset

 y sea 
\begin_inset Formula $E'$
\end_inset

 el conjunto de los vértices incidentes a 
\begin_inset Formula $v\implies\left|E'\right|=\delta\left(G\right)$
\end_inset

, y 
\begin_inset Formula $E'$
\end_inset

 es un conjunto separador de ejes, luego 
\begin_inset Formula 
\[
\lambda\left(G\right)\leq\left|E'\right|=\delta\left(G\right)
\]

\end_inset


\end_layout

\begin_layout Proof
Y ahora vemos que 
\begin_inset Formula $\kappa\left(G\right)\leq\lambda\left(G\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Si 
\begin_inset Formula $G$
\end_inset

 es disconexo o trivial, 
\begin_inset Formula $\kappa\left(G\right)=\lambda\left(G\right)=0$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $G$
\end_inset

 es completo 
\begin_inset Formula $\kappa\left(G\right)=\lambda\left(G\right)=n-1$
\end_inset


\end_layout

\begin_layout Itemize
Supongamos que 
\begin_inset Formula $G$
\end_inset

 es conexo no completo, con 
\begin_inset Formula $n\geq3$
\end_inset

.
 Sea 
\begin_inset Formula $X$
\end_inset

 un corte mínimo de 
\begin_inset Formula $G$
\end_inset

:
\begin_inset Formula 
\[
\left|X\right|=\lambda\left(G\right)\leq\delta\left(g\right)\overset{*}{\leq}n-2
\]

\end_inset

 Por la proposición 2.15, como 
\begin_inset Formula $X$
\end_inset

 es mínimo, 
\begin_inset Formula $G-X$
\end_inset

 tiene dos componentes conexas 
\begin_inset Formula $V_{1},V_{2}$
\end_inset

 que podemos suponer que verifican
\begin_inset Formula 
\[
\left|V_{1}\right|=q,\ \left|V_{2}\right|=n-q,\ 1\leq q\leq n-1
\]

\end_inset

 Y vemos dos posibles casos:
\end_layout

\begin_deeper
\begin_layout Itemize
Si en 
\begin_inset Formula $G$
\end_inset

 todo vértice de 
\begin_inset Formula $V_{1}$
\end_inset

 es adyacente a todo vértice de 
\begin_inset Formula $V_{2}$
\end_inset

, entonces 
\begin_inset Formula 
\[
\left|X\right|=q\left(n-q\right)\geq n-1\#
\]

\end_inset

 lo que es una contradicción, por 
\begin_inset Formula $*$
\end_inset

.
\end_layout

\begin_layout Itemize
Existen 
\begin_inset Formula $u\in V_{1},v\in V_{2}$
\end_inset

 no adyacentes en 
\begin_inset Formula $G$
\end_inset

.
 Construimos 
\begin_inset Formula $V'$
\end_inset

 del siguiente modo: para cada 
\begin_inset Formula $e\in X,$
\end_inset

 si 
\begin_inset Formula $u$
\end_inset

 es incidente a 
\begin_inset Formula $e$
\end_inset

, añadimos a 
\begin_inset Formula $V'$
\end_inset

 el otro extremo de 
\begin_inset Formula $e$
\end_inset

.
 Si 
\begin_inset Formula $v$
\end_inset

 es incidente a 
\begin_inset Formula $e$
\end_inset

, añadimos a 
\begin_inset Formula $V'$
\end_inset

 el otro extremo de 
\begin_inset Formula $e$
\end_inset

.
 Si 
\begin_inset Formula $e$
\end_inset

 no es incidente ni a 
\begin_inset Formula $u$
\end_inset

 ni a 
\begin_inset Formula $v$
\end_inset

, añadimos a 
\begin_inset Formula $V'$
\end_inset

 uno de los extremos de 
\begin_inset Formula $e$
\end_inset

.
 De esta forma
\begin_inset Formula 
\[
\left|V'\right|\leq\left|X\right|
\]

\end_inset


\begin_inset Graphics
	filename pegado13.png

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Y en 
\begin_inset Formula $G-V'$
\end_inset

, 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 no están conectados, porque
\end_layout

\begin_deeper
\begin_layout Itemize
No son adyacentes
\end_layout

\begin_layout Itemize
Los ejes que llevan 
\begin_inset Formula $u$
\end_inset

 a 
\begin_inset Formula $V_{2}$
\end_inset

 están rotos
\end_layout

\begin_layout Itemize
Los ejes que llevan 
\begin_inset Formula $v$
\end_inset

 a 
\begin_inset Formula $V_{1}$
\end_inset

 están rotos
\end_layout

\begin_deeper
\begin_layout Standard
Por tanto, 
\begin_inset Formula $V'$
\end_inset

 es un conjunto separador, por lo que
\begin_inset Formula 
\[
\kappa\left(G\right)\leq\left|V'\right|\leq\left|X\right|=\lambda\left(G\right)
\]

\end_inset


\end_layout

\end_deeper
\end_deeper
\end_deeper
\end_deeper
\end_deeper
\begin_layout Subsubsection
Teorema de Menger
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo conexo no dirigido.
 Un conjunto de vértices 
\begin_inset Formula $S$
\end_inset

 
\series bold
separa dos vértices
\series default
 
\begin_inset Formula $u,v$
\end_inset

 si 
\begin_inset Formula $G-S$
\end_inset

 es disconexo y 
\begin_inset Formula $u,v$
\end_inset

 pertenecen a distintas componentes conexas.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una colección de caminos 
\begin_inset Formula $\left\{ P_{1},...,P_{h}\right\} $
\end_inset

 conectando 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 se dice que son 
\series bold
internamente disjuntos
\series default
 si cada par de estos caminos no tienen otros vértices en común más que
 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
De Menger
\end_layout

\begin_layout Theorem
Sean 
\begin_inset Formula $u,v$
\end_inset

 dos vértices no adyacentes en un grafo 
\begin_inset Formula $G$
\end_inset

.
 El cardinal de un conjunto de menor tamaño que separa 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 coincide con el máximo número de caminos entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 internamente disjuntos en 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
(Ejercicio 2.11)
\end_layout

\begin_layout Proposition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo k-conexo y 
\begin_inset Formula $e\in E$
\end_inset

 un eje de 
\begin_inset Formula $G$
\end_inset

.
 Entonces 
\begin_inset Formula $G-e$
\end_inset

 es 
\begin_inset Formula $\left(k-1\right)$
\end_inset

-conexo
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Si 
\begin_inset Formula $\kappa\left(G-e\right)<k-1\implies\exists S\subset V,\ \left|S\right|<k-1$
\end_inset

 tal que 
\begin_inset Formula $\left(G-e\right)-S$
\end_inset

 es disconexo.
\end_layout

\begin_layout Proof
Pero entonces, suponiendo 
\begin_inset Formula $e=\left(u,v\right)$
\end_inset


\begin_inset Formula 
\[
S\cup\left\{ u\right\} \ o\ S\cup\left\{ v\right\} 
\]

\end_inset

 es conjunto separador de 
\begin_inset Formula $G$
\end_inset

, con 
\begin_inset Formula $\left|S\cup\left\{ u\right\} \right|<k\#$
\end_inset

, contradicción, pues 
\begin_inset Formula $G$
\end_inset

 es 
\begin_inset Formula $k$
\end_inset

-conexo.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 es 
\begin_inset Formula $k$
\end_inset

-conexo si, y solo si, para cada par de vértices 
\begin_inset Formula $u\neq v\in V$
\end_inset

 hay en 
\begin_inset Formula $G$
\end_inset

 al menos 
\begin_inset Formula $k$
\end_inset

 caminos internamente disjuntos entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $G=K_{n}$
\end_inset

, se tiene 
\begin_inset Formula $\kappa\left(G\right)=n-1$
\end_inset

, y si 
\begin_inset Formula $i\sim j$
\end_inset

, entonces tenemos los caminos 
\begin_inset Formula $\left(i,j\right)$
\end_inset

 y 
\begin_inset Formula $\forall k\neq i,j$
\end_inset

 el 
\begin_inset Formula $\left(i,k,j\right)$
\end_inset

, en total hay 
\begin_inset Formula $n-1$
\end_inset

 caminos internamente disjuntos
\end_layout

\begin_layout Itemize
Sea 
\begin_inset Formula $G$
\end_inset

 
\begin_inset Formula $k$
\end_inset

-conexo no completo.
 Sean 
\begin_inset Formula $u\neq v\in V$
\end_inset

.
 Entonces
\end_layout

\begin_deeper
\begin_layout Itemize
Si no son adyacentes, sea 
\begin_inset Formula $U$
\end_inset

 el conjunto de menor tamaño que separa 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

.
 Como 
\begin_inset Formula $G-U$
\end_inset

 es disconexo, se tiene
\begin_inset Formula 
\[
\left|U\right|\geq\kappa\left(G\right)\geq k
\]

\end_inset

 y por el teorema de Menger hay al menos 
\begin_inset Formula $k$
\end_inset

 caminos internamente disjuntos entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 en 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $\left(u,v\right)\in E$
\end_inset

, como 
\begin_inset Formula $G$
\end_inset

 es 
\begin_inset Formula $k$
\end_inset

-conexo, entonces 
\begin_inset Formula $G-e$
\end_inset

 es 
\begin_inset Formula $\left(k-1\right)-conexo$
\end_inset

, y entonces hay al menos 
\begin_inset Formula $k-1$
\end_inset

 internamente disjuntos entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 en 
\begin_inset Formula $G-e$
\end_inset

 (y en 
\begin_inset Formula $G$
\end_inset

), aplicando el caso anterior.
 Añadiendo el camino 
\begin_inset Formula $e$
\end_inset

 en 
\begin_inset Formula $G$
\end_inset

 tenemos, al menos, 
\begin_inset Formula $k$
\end_inset

 caminos internamente disjuntos entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 en 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $\forall u,v\in V,\ \left(*\right)\exists k$
\end_inset

 caminos internamente disjuntos entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 en 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $S$
\end_inset

 un conjunto separador de vértices de menor tamaño, 
\begin_inset Formula $\left|S\right|=\kappa\left(G\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Como 
\begin_inset Formula $G-S$
\end_inset

 es disconexo, sean 
\begin_inset Formula $u,v$
\end_inset

 dos vértices en distintas componentes conexas de 
\begin_inset Formula $G-S$
\end_inset

.
 Entonces 
\begin_inset Formula $S$
\end_inset

 separa 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Standard
Por 
\begin_inset Formula $\left(*\right)$
\end_inset

 y el teorema de Menger, debe ser
\begin_inset Formula 
\[
\kappa\left(G\right)=\left|S\right|\geq k
\]

\end_inset

 luego 
\begin_inset Formula $G$
\end_inset

 es 
\begin_inset Formula $k$
\end_inset

-conexo.
\end_layout

\begin_layout Subsubsection
Resultados para conectividad por ejes
\end_layout

\begin_layout Standard
Un conjunto 
\begin_inset Formula $X\subset E$
\end_inset

 
\series bold
separa dos vértices
\series default
 
\begin_inset Formula $u,v$
\end_inset

 si 
\begin_inset Formula $G-X$
\end_inset

 es disconexo y 
\begin_inset Formula $u,v$
\end_inset

 están en distintas componentes conexas de 
\begin_inset Formula $G-X$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Sean 
\begin_inset Formula $u,v$
\end_inset

 dos vértices de un grafo conexo 
\begin_inset Formula $G$
\end_inset

.
 El mínimo número de ejes que separan 
\begin_inset Formula $u,v$
\end_inset

 es igual al máximo número de caminos en 
\begin_inset Formula $G$
\end_inset

, sin ejes comunes, uniendo 
\begin_inset Formula $u,v$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 es 
\begin_inset Formula $k$
\end_inset

-conexo por ejes si, y solo si, para cada par de vértices 
\begin_inset Formula $u\neq v\in V$
\end_inset

, hay en G al menos k caminos sin ejes comunes entre u y v, disjuntos entre
 u y v
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Árboles 
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 es un 
\series bold
árbol 
\series default
si es conexo y no contiene ciclos
\end_layout

\begin_layout Definition
Un 
\series bold
árbol generador
\series default
 de un grafo es un subgrafo parcial conexo y sin ciclos
\end_layout

\begin_layout Definition
Un 
\series bold
bosque
\series default
 es un grafo sin ciclos
\end_layout

\begin_layout Definition
En un árbol, los nodos con grado de incidencia 1 se denominan 
\series bold
hojas
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
Caracterización de árboles
\end_layout

\begin_layout Theorem
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

.
 Son equivalentes:
\end_layout

\begin_deeper
\begin_layout Enumerate
G es conexo y sin ciclos
\end_layout

\begin_layout Enumerate
Entre cada par de vértices distintos de V existe un único camino
\end_layout

\begin_layout Enumerate
G es conexo y 
\begin_inset Formula $m=n-1$
\end_inset


\end_layout

\begin_layout Enumerate
G no contiene ciclos y 
\begin_inset Formula $m=n-1$
\end_inset


\end_layout

\begin_layout Enumerate
G está minimalmente conectado
\end_layout

\begin_layout Enumerate
G no contiene ciclos y si añadimos una arista entre dos vértices no adyacentes
 cualesquiera de V, el grafo resultante contiene un único ciclo
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Proof
Veamos todas las implicaciones:
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[1\implies2\right]$
\end_inset

 Como 
\begin_inset Formula $G$
\end_inset

 es conexo, entre cada par de vértices distintos de 
\begin_inset Formula $V$
\end_inset

, existe un camino que los une.
 ¿Es único?
\end_layout

\begin_layout Proof
Supongamos que no lo es, entonces tenemos los caminos
\begin_inset Formula 
\[
v_{1}...v_{i}v_{i+1}...v_{j-1}v_{j}...v_{k}
\]

\end_inset


\begin_inset Formula 
\[
v_{1}...v_{i}v_{i+1}^{*}...v_{j-1}^{*}v_{j}...v_{k}
\]

\end_inset

 luego hay un ciclo entre 
\begin_inset Formula $v_{i}$
\end_inset

y 
\begin_inset Formula $v_{j}\#$
\end_inset

 El camino debe ser único.
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[2\implies3\right]$
\end_inset

 Es conexo porque todos los vértices están conectados entre sí.
\end_layout

\begin_layout Proof
Para ver que 
\begin_inset Formula $m=n-1$
\end_inset

, hacemos inducción sobre 
\begin_inset Formula $n$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $n=1$
\end_inset

: obvio 
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $n=2$
\end_inset

: el grafo solo puede ser 
\begin_inset Formula $K_{2}$
\end_inset

, luego 
\begin_inset Formula $n=2,m=1\checkmark$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Supongamos que se verifica para los grafos de orden
\begin_inset Formula $<k$
\end_inset

 y la hipótesis de inducción.
\end_layout

\begin_layout Standard
Entonces, si tenemos un grafo de orden 
\begin_inset Formula $k$
\end_inset

 verificando 
\begin_inset Formula $\left(2\right)$
\end_inset

, quitamos un eje, y quedan dos componentes conexas de órdenes 
\begin_inset Formula $n_{1},n_{2}$
\end_inset

 con 
\begin_inset Formula $n_{1}+n_{2}=n$
\end_inset

.
 Por inducción, se tiene que 
\begin_inset Formula $m_{1}=n_{1}-1$
\end_inset

 y 
\begin_inset Formula $m_{2}=n_{2}-1$
\end_inset

 luego el grafo inicial tiene tamaño
\begin_inset Formula 
\[
m=m_{1}+m_{2}+1=n_{1}-1+n_{2}-1+1=n-1\checkmark
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Formula $\left[3\implies4\right]$
\end_inset

 Solo hay que ver que 
\begin_inset Formula $G$
\end_inset

 no tiene ciclos.
\end_layout

\begin_layout Standard
Supongamos que tiene algún ciclo.
 Como es conexo y tiene un ciclo, al quitar un eje del ciclo el grafo sigue
 siendo conexo y el grafo resultante tiene 
\begin_inset Formula $n-2$
\end_inset

 ejes.
 Pero vimos que un grafo conexo tiene al menos 
\begin_inset Formula $n-1$
\end_inset

 ejes.
\end_layout

\begin_layout Standard
\begin_inset Formula $\left[4\implies5\right]$
\end_inset

 Si vemos que es conexo, ya está, pues 
\begin_inset Formula $m=n-1$
\end_inset

.
\end_layout

\begin_layout Standard
Supongamos que no es conexo, y sean 
\begin_inset Formula $G_{1},...,G_{q}$
\end_inset

 las componentes conexas de 
\begin_inset Formula $G$
\end_inset

.
 Ahora bien, cada 
\begin_inset Formula $G_{i}$
\end_inset

 es conexo y sin ciclos, luego usamos 
\begin_inset Formula $1\implies3$
\end_inset

 y obtenemos que 
\begin_inset Formula $m_{i}=n_{i}-1$
\end_inset

, y entonces
\begin_inset Formula 
\[
n-1=m=\sum_{i}\left(n_{i}-1\right)=\sum_{i}n_{i}-q=n-q
\]

\end_inset

 y debe ser 
\begin_inset Formula $q=1$
\end_inset

 y solo hay una componente conexa# Contradicción, pues supusimos que 
\begin_inset Formula $G$
\end_inset

 era disconexo.
\end_layout

\begin_layout Standard
Por tanto, 
\begin_inset Formula $G$
\end_inset

 ha de ser conexo.
\end_layout

\begin_layout Standard
\begin_inset Formula $\left[5\implies6\right]$
\end_inset

 Si tuviera algún ciclo, podríamos quitar un eje del ciclo y seguiría siendo
 conexo, pero esto contradice la hipótesis de que 
\begin_inset Formula $G$
\end_inset

 es minimalmente conexo.
 Por tanto, no contiene ciclos.
\end_layout

\begin_layout Standard
Si al añadir un eje se forma más de un ciclo, es que antes había algún ciclo,
 y esto no es así.
 Por tanto, se forma un único ciclo.
\end_layout

\begin_layout Standard
\begin_inset Formula $\left[6\implies1\right]$
\end_inset

 No contiene ciclos por hipótesis.
 Y es conexo porque de no serlo, podríamos añadir un eje sin formar ningún
 ciclo, sería un eje que conectase dos componentes conexas distintas.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
En un árbol podemos distinguir un nodo cualquiera que pasará a llamarse
 
\series bold
nodo raíz
\series default
 
\begin_inset Formula $r$
\end_inset


\end_layout

\begin_layout Definition
El par compuesto por árbol y raíz se denomina 
\series bold
árbol con raíz
\end_layout

\begin_layout Definition
El resto de nodos con grado de incidencia mayor que 1 se denominan 
\series bold
nudos
\end_layout

\begin_layout Definition
Los nodos con grado de incidencia 1 (a veces se excluye la raíz) se llamarán
 
\series bold
hojas
\end_layout

\begin_layout Definition
Cada nodo 
\begin_inset Formula $v\neq r$
\end_inset

 del árbol enraizado estará conectado a 
\begin_inset Formula $r$
\end_inset

 mediante un único camino 
\begin_inset Formula $rv_{1}...v_{k}v$
\end_inset

.
 Diremos que los nodos 
\begin_inset Formula $r,v_{1},...,v_{k}$
\end_inset

 son los 
\series bold
predecesores
\series default
 de 
\begin_inset Formula $v$
\end_inset

 en el árbol y que 
\begin_inset Formula $v$
\end_inset

 es el 
\series bold
sucesor
\series default
 de estos nodos.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La 
\series bold
relación de precedencia
\begin_inset Formula 
\[
u\leq v\iff u\text{ precede a \ensuremath{v} o bien \ensuremath{u=v}}
\]

\end_inset

 
\series default
induce un orden parcial en los nodos del árbol enraizado.
 
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $u\leq v$
\end_inset

 o 
\begin_inset Formula $v\leq u$
\end_inset

 diremos que 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 son 
\series bold
comparables
\series default
.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Diremos que la raíz del árbol enraizado está a 
\series bold
nivel cero
\series default
.
\end_layout

\begin_layout Definition
El 
\series bold
nivel
\series default
 del resto de nodos será la longitud del camino que los une a la raíz.
\end_layout

\begin_layout Definition
Llamamos 
\series bold
altura
\series default
 del árbol enraizado al máximo de los niveles de sus nodos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Todo árbol con 
\begin_inset Formula $n\geq2$
\end_inset

 tiene al menos dos hojas
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Como es un árbol, se tiene 
\begin_inset Formula $m=n-1$
\end_inset

.
\end_layout

\begin_layout Proof
Se tiene entonces
\begin_inset Formula 
\[
\sum_{v\in V}o\left(v\right)=2m=2n-2
\]

\end_inset

 y esto puede expresarse como
\begin_inset Formula 
\[
\sum_{v\in V}o\left(v\right)=\sum_{v\ hoja}o\left(v\right)+\sum_{v|o\left(v\right)\geq2}o\left(v\right)
\]

\end_inset

 y si suponemos que hay 
\begin_inset Formula $h$
\end_inset

 hojas, entonces es
\begin_inset Formula 
\[
\sum_{v\ hoja}o\left(v\right)=\sum_{v\ hoja}1=h
\]

\end_inset

 Y es
\begin_inset Formula 
\[
2n-2=h+\sum_{v|o\left(v\right)\geq2}o\left(v\right)\geq h+2\left(n-h\right)=h+2n-2h=2n-h
\]

\end_inset

 luego 
\begin_inset Formula $h\geq2$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un 
\series bold
árbol binario
\series default
 es aquel cuyos nodos tienen grado 1 ó 3 excepto un único nodo que tiene
 grado 2.
\end_layout

\begin_layout Definition
Llammos 
\series bold
raíz del árbol binario
\series default
 al nodo de grado 2.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
El número de vértices de un árbol binario es impar
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $m=n-1$
\end_inset

 y 
\begin_inset Formula 
\[
\sum_{v\in V}o\left(v\right)=2n-2\ \left(par\right)
\]

\end_inset

 y 
\begin_inset Formula 
\[
\sum_{v\in V}o\left(v\right)=o\left(r\right)+\sum_{v|o\left(v\right)\ impar}o\left(v\right)=2+\sum_{v|o\left(v\right)\ impar}o\left(v\right)
\]

\end_inset

 luego la cantidad de nodos de grado impar ha de ser par, para que esta
 suma de par, por tanto hay una cantidad total par de nodos
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
El número de hojas de un árbol binario es 
\begin_inset Formula $\frac{n+1}{2}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Sea 
\begin_inset Formula $h$
\end_inset

 la cantidad de hojas, entonces
\begin_inset Formula 
\[
o\left(r\right)+h+3\cdot\left(n-h-1\right)=2n-2\implies2+3n-2h-3=2n-2\implies n+1=2h\implies h=\frac{n+1}{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
El número de nudos de un árbol binario es 
\begin_inset Formula $\frac{n-3}{2}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Si lo llamamos 
\begin_inset Formula $k$
\end_inset

, debe verificarse
\begin_inset Formula 
\[
1+\frac{n+1}{2}+k=n\implies2+n+1+2k=2n\implies2k=n-3\implies k=\frac{n-3}{2}
\]

\end_inset


\end_layout

\begin_layout Standard
`
\begin_inset Flex Color Box
status open

\begin_layout Proposition
La altura de un árbol binario está comprendida entre 
\begin_inset Formula $\left\lceil \log_{2}\left(n+1\right)-1\right\rceil $
\end_inset

 y 
\begin_inset Formula $\frac{n-1}{2}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Primero veamos la altura máxima:
\end_layout

\begin_layout Proof
El árbol de altura máxima es de la siguiente forma:
\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado14.png

\end_inset


\end_layout

\begin_layout Proof
y se tiene
\begin_inset Formula 
\[
n=2a+1\implies a=\frac{n-1}{2}
\]

\end_inset


\end_layout

\begin_layout Proof
Y para la altura mínima, vemos que el árbol de altura mínima tiene la forma
\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado15.png

\end_inset


\end_layout

\begin_layout Proof
y tenemos
\begin_inset Formula 
\[
1+2+2^{2}+...+2^{a-1}<n\leq1+2+2^{2}+...+2^{a}
\]

\end_inset

 esto son sumas geométricas de razón 2, y queda
\begin_inset Formula 
\[
2^{a}-1<n\leq2^{a+1}-1\implies2^{a}<n+1\leq2^{a+1}
\]

\end_inset

 por lo que
\begin_inset Formula 
\[
a<\log_{2}\left(n+1\right)\leq a+1
\]

\end_inset

 por lo tanto
\begin_inset Formula 
\[
a=\left\lceil \log_{2}\left(n+1\right)-1\right\rceil 
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una 
\series bold
red
\series default
 es una terna 
\begin_inset Formula $\left(V,E,l\right)$
\end_inset

 formada por un grafo 
\begin_inset Formula $\left(V,E\right)$
\end_inset

 y una función 
\begin_inset Formula $l:E\rightarrow\mathbb{R}$
\end_inset

 llamada 
\series bold
función de peso (longitud)
\series default
.
\end_layout

\begin_layout Definition
Dada una red 
\begin_inset Formula $\left(V,E,l\right)$
\end_inset

 y un árbol generador 
\begin_inset Formula $T=\left(V,E_{T}\right)$
\end_inset

, se define el 
\series bold
peso del árbol
\series default
 como
\begin_inset Formula 
\[
l\left(T\right)=\sum_{e\in E_{T}}l\left(e\right)
\]

\end_inset


\end_layout

\begin_layout Definition
La 
\series bold
búsqueda del árbol generador de peso mínimo
\series default
 en 
\begin_inset Formula $G$
\end_inset

 es la resolución del problema
\begin_inset Formula 
\[
\begin{array}{cc}
\min & l\left(T\right)\\
s.a. & T\text{ es árbol generador de \ensuremath{G}}
\end{array}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Sea una red 
\begin_inset Formula $G=\left(V,E,l\right)$
\end_inset

 y un árbol generador de 
\begin_inset Formula $G$
\end_inset

, 
\begin_inset Formula $T=\left(V,E_{T}\right)$
\end_inset

.
 Las siguientes afirmaciones son equivalentes:
\end_layout

\begin_deeper
\begin_layout Enumerate
T es un árbol generador minimal
\end_layout

\begin_layout Enumerate
Dada cualquier arista 
\begin_inset Formula $a\in E\setminus E_{T}$
\end_inset

 y cualquier otra arista 
\begin_inset Formula $e\in E_{T}$
\end_inset

 perteneciente al único ciclo del grafo 
\begin_inset Formula $\left(V,E_{T}\cup\left\{ a\right\} \right)$
\end_inset

 se verifica 
\begin_inset Formula $l\left(e\right)\leq l\left(a\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Para cualquier arista 
\begin_inset Formula $e\in E_{T},l\left(e\right)\leq l\left(a\right),\ \forall a\in w\left(V_{1}^{e}\right)$
\end_inset

, este último es el cociclo en G asociado a una componente conexa cualquiera
 de 
\begin_inset Formula $\left(V,E_{T}\setminus\left\{ e\right\} \right)$
\end_inset

 (un cociclo es un corte, o sea 
\begin_inset Formula $w\left(V_{1}^{e}\right)=\left[V_{1}^{e},V\setminus V_{1}^{e}\right]$
\end_inset

)
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Proof
Veamos cada implicación:
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[1\implies2\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $l\left(a\right)<l\left(e\right)$
\end_inset

.
 Si hacemos 
\begin_inset Formula 
\[
E_{T}'=E_{T}\setminus\left\{ e\right\} \cup\left\{ a\right\} 
\]

\end_inset

 obtenemos un nuevo árbol generador 
\begin_inset Formula $T'=\left(V,E_{T}'\right)$
\end_inset

 y 
\begin_inset Formula 
\[
l\left(T'\right)<l\left(T\right)\#
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[2\implies3\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $\exists e\in E_{T},\ a\in w\left(V_{1}^{e}\right)|l\left(e\right)>l\left(a\right)$
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado16.png

\end_inset


\end_layout

\begin_layout Proof
En 
\begin_inset Formula $T$
\end_inset

 existe un único camino entre 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

, 
\begin_inset Formula $\gamma$
\end_inset

.
\end_layout

\begin_layout Proof
Haciendo 
\begin_inset Formula $\gamma\cup\left\{ a\right\} $
\end_inset

, entonces tenemos un ciclo, y por hipótesis se verifica 
\begin_inset Formula $l\left(e\right)\leq l\left(a\right)\#$
\end_inset

 contradicción, habíamos supuesto lo contrario.
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[3\implies1\right]$
\end_inset

 Sea 
\begin_inset Formula $T$
\end_inset

 el árbol generador que verifica 
\begin_inset Formula $\left(3\right)$
\end_inset

.
 Sea 
\begin_inset Formula $T^{*}$
\end_inset

 un árbol generador de peso mínimo:
\end_layout

\begin_deeper
\begin_layout Itemize
Si 
\begin_inset Formula $T=T^{*}$
\end_inset

, FIN, 
\begin_inset Formula $T$
\end_inset

 es de peso mínimo
\end_layout

\begin_layout Itemize
Si no, sea 
\begin_inset Formula $e\in E_{T}\setminus E_{T^{*}}$
\end_inset

.
 Al añadir 
\begin_inset Formula $e$
\end_inset

 a 
\begin_inset Formula $T^{*}$
\end_inset

 se forma un ciclo.
 Si quitamos 
\begin_inset Formula $e$
\end_inset

 de 
\begin_inset Formula $T$
\end_inset

, entonces se forman dos componentes conexas 
\begin_inset Formula $V_{1},V_{2}$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename pegado17.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $w\left(V_{1}^{e}\right)$
\end_inset

 es el cociclo 
\end_layout

\begin_layout Standard
Al hacer 
\begin_inset Formula $T^{*}\cup\left\{ e\right\} $
\end_inset

 se forma un ciclo que contiene una arista 
\begin_inset Formula $a\in w\left(V_{1}^{e}\right)\implies l\left(e\right)\leq l\left(a\right)$
\end_inset

.
 Si hacemos
\begin_inset Formula 
\[
\overline{T^{*}}=T-\left\{ a\right\} \cup\left\{ e\right\} 
\]

\end_inset

 entonces
\begin_inset Formula 
\[
l\left(\overline{T^{*}}\right)\leq l\left(T^{*}\right)
\]

\end_inset

pero 
\begin_inset Formula $T^{*}$
\end_inset

 es minimal, luego
\begin_inset Formula 
\[
l\left(\overline{T^{*}}\right)=l\left(T^{*}\right)
\]

\end_inset

 y entonces 
\begin_inset Formula 
\[
l\left(e\right)=l\left(a\right)
\]

\end_inset

 Repitiendo este proceso, vemos como toda arista de 
\begin_inset Formula $T$
\end_inset

 tiene asociada una arista en 
\begin_inset Formula $T^{*}$
\end_inset

 que pesa lo mismo.
 Por tanto
\begin_inset Formula 
\[
l\left(T\right)=l\left(T^{*}\right)
\]

\end_inset

 y 
\begin_inset Formula $T$
\end_inset

 es minimal.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Kruskal para encontrar un árbol generador minimal
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
Ordenar las aristas de 
\begin_inset Formula $E$
\end_inset

 en orden ascendente por peso
\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Plain Layout
Añadir 
\begin_inset Formula $n-1$
\end_inset

 aristas a 
\begin_inset Formula $T$
\end_inset

, por orden de peso, sin formar ciclos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Prim para encontrar un árbol generador minimal
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
Tomamos un vértice 
\begin_inset Formula $r\in V$
\end_inset

, hacemos 
\begin_inset Formula $V_{1}=\left\{ r\right\} $
\end_inset

 y 
\begin_inset Formula $V_{2}=V\setminus\left\{ r\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Plain Layout
Añadimos al árbol la arista de menor peso de 
\begin_inset Formula $\left[V_{1},V_{2}\right]$
\end_inset

.
 Si esta es 
\begin_inset Formula $\left(v_{1},v_{2}\right)$
\end_inset

 con 
\begin_inset Formula $v_{1}\in V_{1}$
\end_inset

 y 
\begin_inset Formula $V_{2}\in V_{2}$
\end_inset

, hacemos 
\begin_inset Formula $V_{1}=V_{1}\cup\left\{ v_{2}\right\} $
\end_inset

 y 
\begin_inset Formula $V_{2}=V_{2}\setminus\left\{ v_{2}\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Plain Layout
Si 
\begin_inset Formula $\left|V_{1}\right|=n$
\end_inset

, FIN
\end_layout

\begin_layout Plain Layout
Si no, ir al Paso 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Sollin para encontrar un árbol generador minimal
\end_layout

\begin_layout Plain Layout
Es una variante de Prim, en la que hacemos Prim en todos los nodos simultáneamen
te.
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
Para cada 
\begin_inset Formula $i\in V$
\end_inset

, hacer 
\begin_inset Formula $N_{i}=\left\{ i\right\} ,\ T=\emptyset$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Plain Layout
Para árbol 
\begin_inset Formula $N_{i}$
\end_inset

, determinar el eje 
\begin_inset Formula $\left(u_{i},v_{i}\right)$
\end_inset

 tal que 
\begin_inset Formula 
\[
l\left(u_{i},v_{i}\right)=\min\left\{ l\left(u,v\right):\left(u,v\right)\in E,\ u\in N_{i},v\notin N_{i}\right\} 
\]

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Plain Layout
Para cada 
\begin_inset Formula $N_{i}$
\end_inset

, si 
\begin_inset Formula $u_{i},v_{i}$
\end_inset

 pertenecen a árboles diferentes, unir dichos árboles en uno solo y hacer
\begin_inset Formula 
\[
T=E\cup\left\{ \left(u_{i},v_{i}\right)\right\} 
\]

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 4
\end_layout

\begin_layout Plain Layout
Si 
\begin_inset Formula $\left|T\right|=n-1$
\end_inset

, FIN
\end_layout

\begin_layout Plain Layout
Si no, ir al Paso 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Caminos más cortos.
 Recorridos por aristas y vértices
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $\left(V,E,l\right)$
\end_inset

 una red y 
\begin_inset Formula $P$
\end_inset

 un camino en 
\begin_inset Formula $G$
\end_inset

.
 Se define la 
\series bold
longitud del camino
\series default
 
\begin_inset Formula $P$
\end_inset

 como
\begin_inset Formula 
\[
l\left(P\right)=\sum_{a\in P}l\left(a\right)
\]

\end_inset

 El 
\series bold
problema del camino más corto entre 
\begin_inset Formula $\boldsymbol{v_{i}}$
\end_inset

 y 
\begin_inset Formula $\boldsymbol{v_{j}}$
\end_inset

 
\series default
en 
\begin_inset Formula $G$
\end_inset

 es
\begin_inset Formula 
\[
\begin{array}{cc}
\min & l\left(P\right)\\
s.a. & P\ \text{es un camino entre \ensuremath{v_{i}} y \ensuremath{v_{j}}}
\end{array}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En lo que sigue para una arista 
\begin_inset Formula $e=\left(u,v\right)$
\end_inset

 denotaremos indistintamente 
\begin_inset Formula $l\left(u,v\right),\ l_{e},\ l_{uv}$
\end_inset

.
 También supondremos que la red es conexa y que 
\begin_inset Formula $l_{e}\geq0,\ \forall e\in E$
\end_inset

.
\end_layout

\begin_layout Remark
Dado un camino más corto de 
\begin_inset Formula $v_{a}$
\end_inset

 a 
\begin_inset Formula $v_{b}$
\end_inset

, todo subcamino de este que conecte 
\begin_inset Formula $v_{i}$
\end_inset

 con 
\begin_inset Formula $v_{j}$
\end_inset

 es un camino más corto entre 
\begin_inset Formula $v_{i}$
\end_inset

 y 
\begin_inset Formula $v_{j}$
\end_inset

 (o sea, los subcaminos de los caminos mínimos, son caminos mínimos entre
 los nodos que unen).
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
El vector 
\begin_inset Formula $d=\left(d_{1},...,d_{n}\right)$
\end_inset

 que contiene longitudes de caminos que conectan el nodo 
\begin_inset Formula $v_{s}$
\end_inset

 con todos los nodos 
\begin_inset Formula $v_{1},...,v_{n}$
\end_inset

 de una red, con 
\begin_inset Formula $d_{s}=0$
\end_inset

, mide las longitudes de los caminos más cortos entre 
\begin_inset Formula $v_{s}$
\end_inset

 y todos los demás nodos si, y solo si
\begin_inset Formula 
\[
d_{j}-d_{i}\leq l_{ij},\ \forall\left(v_{i},v_{j}\right)\in E
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 
\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado18.png

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\forall\left(v_{i},v_{j}\right)\in E$
\end_inset

, 
\begin_inset Formula $d_{i}+l_{ij}$
\end_inset

 mide la longitud del camino entre 
\begin_inset Formula $v_{s}$
\end_inset

 y 
\begin_inset Formula $v_{j}$
\end_inset

, pasando justo antes por 
\begin_inset Formula $v_{i}$
\end_inset

, como 
\begin_inset Formula $d_{j}$
\end_inset

 es mínimo, entonces
\begin_inset Formula 
\[
d_{i}+l_{ij}\geq d_{j}\implies d_{j}-d_{i}\leq l_{ij}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Sea 
\begin_inset Formula $P$
\end_inset

 un camino cualquiera de 
\begin_inset Formula $v_{s}$
\end_inset

 a 
\begin_inset Formula $v_{j}$
\end_inset


\begin_inset Formula 
\[
P=v_{s}v_{i1}v_{i2}...v_{ik}v_{j}
\]

\end_inset

 entonces
\begin_inset Formula 
\[
\begin{array}{c}
d_{i1}-d_{s}\leq l\left(v_{s},v_{i1}\right)\\
d_{i2}-d_{i1}\leq l\left(v_{i1},v_{i2}\right)\\
...\\
d_{j}-d_{ik}\leq l\left(v_{ik},v_{j}\right)
\end{array}
\]

\end_inset

 si los sumamos todos, se van cancelando los sumandos de la izquierda, y
 queda 
\begin_inset Formula $\left(d_{s}=0\right)$
\end_inset


\begin_inset Formula 
\[
d_{j}=d_{j}-d_{s}\leq l\left(v_{s},v_{i1}\right)+...+l\left(v_{ik},v_{j}\right)=l\left(P\right)
\]

\end_inset

 luego 
\begin_inset Formula $d_{j}$
\end_inset

 es la longitud del camino más corto entre 
\begin_inset Formula $v_{s}$
\end_inset

 y 
\begin_inset Formula $v_{j}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Supongamos que el vector 
\begin_inset Formula $d=\left(d_{1},...,d_{n}\right)$
\end_inset

 contiene longitudes de caminos que conectan el nodo 
\begin_inset Formula $v_{s}$
\end_inset

 con todos los nodos 
\begin_inset Formula $v_{1},...,v_{n}$
\end_inset

 de una red, con 
\begin_inset Formula $d_{s}=0$
\end_inset

.
 Sea 
\begin_inset Formula $V'$
\end_inset

 un conjunto de vértices para el cual
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $v_{s}\notin V'$
\end_inset


\end_layout

\begin_layout Enumerate
si 
\begin_inset Formula $v_{i}\notin V'$
\end_inset

, entonces 
\begin_inset Formula $d_{i}$
\end_inset

 es la longitud de un camino más corto de 
\begin_inset Formula $v_{s}$
\end_inset

 a 
\begin_inset Formula $v_{i}$
\end_inset


\end_layout

\begin_layout Enumerate
si 
\begin_inset Formula $v_{i}\in V'$
\end_inset

, entonces 
\begin_inset Formula $d_{i}=\min\left\{ d_{j}+l_{ji}:v_{j}\notin V',\ v_{j}\in N\left(v_{i}\right)\right\} $
\end_inset


\end_layout

\end_deeper
\begin_layout Theorem
Sea 
\begin_inset Formula $v_{j}\in V'$
\end_inset

 tal que
\begin_inset Formula 
\[
d_{j}=\min\left\{ d_{i}:v_{i}\in V'\right\} 
\]

\end_inset

 Entonces 
\begin_inset Formula $d_{j}$
\end_inset

 es la longitud de un camino más corto de 
\begin_inset Formula $v_{s}$
\end_inset

 a 
\begin_inset Formula $v_{j}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Sea 
\begin_inset Formula $V'=V\setminus\left\{ v_{s}\right\} $
\end_inset

 y 
\begin_inset Formula $P$
\end_inset

 un camino de 
\begin_inset Formula $v_{s}$
\end_inset

 a 
\begin_inset Formula $v_{j}$
\end_inset

 con 
\begin_inset Formula $v_{s}\notin V'$
\end_inset

 y 
\begin_inset Formula $v_{j}\in V'$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado19.png

\end_inset


\end_layout

\begin_layout Proof
Entonces
\begin_inset Formula 
\[
l\left(P\right)\geq l\left(P_{2}\right)\overset{2.}{\geq}d_{i}+l_{ik}\overset{3.}{\geq}d_{k}\overset{\min}{\geq}d_{j}
\]

\end_inset

 y se tiene que 
\begin_inset Formula $d_{j}$
\end_inset

 es la longitud de un camino más corto de 
\begin_inset Formula $v_{s}$
\end_inset

 a 
\begin_inset Formula $v_{j}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Dijkstra
\end_layout

\begin_layout Plain Layout
Sirve para obtener el vector de distancias mínimas de 
\begin_inset Formula $v_{s}$
\end_inset

 a los demás nodos de la red y el vector de predecesores que permite reconstruir
 los caminos.
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
Elegimos 
\begin_inset Formula $v_{s}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $D=\left(d_{1},...,d_{n}\right)$
\end_inset

 (vector de distancias)
\begin_inset Formula 
\[
d_{i}=\begin{cases}
l_{si} & i\in N\left(v_{s}\right)\\
0 & i=s\\
\infty & otro\ caso
\end{cases}
\]

\end_inset

 
\begin_inset Formula $P=\left(p_{1},...,p_{n}\right)$
\end_inset

 (vector de predecesores)
\begin_inset Formula 
\[
p_{i}=\begin{cases}
s & i\in N\left(v_{s}\right)\\
0 & otro\ caso
\end{cases}
\]

\end_inset

 
\begin_inset Formula $V'=V\setminus\left\{ v_{s}\right\} $
\end_inset

 (nodos que faltan por visitar)
\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Plain Layout
Buscar 
\begin_inset Formula $v_{j}\in V'$
\end_inset

 tal que 
\begin_inset Formula $d_{j}=\min\left\{ d_{i}:v_{i}\in V'\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout
Hacemos 
\begin_inset Formula $V'=V'\setminus\left\{ v_{j}\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\forall v_{i}\in N\left(v_{j}\right)\cap V'$
\end_inset

, si 
\begin_inset Formula $d_{j}+l_{ji}<d_{i}$
\end_inset

 hacer
\begin_inset Formula 
\[
d_{i}=d_{j}+l_{ji}
\]

\end_inset


\begin_inset Formula 
\[
p_{i}=j
\]

\end_inset


\end_layout

\begin_layout Plain Layout
Si 
\begin_inset Formula $V'\neq\emptyset$
\end_inset

, volver al Paso 2
\end_layout

\begin_layout Plain Layout
Si no, FIN
\end_layout

\end_inset


\end_layout

\begin_layout Standard
`
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 se llama 
\series bold
tour euleariano
\series default
 a un paseo cerrado que atraviesa cada arista de 
\begin_inset Formula $E$
\end_inset

 exactamente una vez.
\end_layout

\begin_layout Definition
Un grafo que admite un tour euleriano se denomina 
\series bold
grafo euleriano
\series default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Un grado conexo es euleriano si, y solo si, todos los vértices son pares
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Fleury
\end_layout

\begin_layout Plain Layout
Para obtención de tours Eulerianos
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
Hacer una copia 
\begin_inset Formula $G'=\left(V',E'\right)$
\end_inset

 del grafo.
\end_layout

\begin_layout Plain Layout
Tomar cualquier 
\begin_inset Formula $i\in V'$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $\exists\left(i,j\right)\in E'$
\end_inset

 que no es puente en 
\begin_inset Formula $G'$
\end_inset

, elegimos ese eje.
\end_layout

\begin_layout Itemize
Si no, elegimos cualquier eje de 
\begin_inset Formula $E'$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Plain Layout
Añadimos 
\begin_inset Formula $\left(i,j\right)$
\end_inset

 al paseo y hacemos 
\begin_inset Formula $E'=E'\setminus\left\{ \left(i,j\right)\right\} $
\end_inset

.
\end_layout

\begin_layout Plain Layout
Si 
\begin_inset Formula $E'=\emptyset$
\end_inset

, FIN
\end_layout

\begin_layout Plain Layout
Si no, hacemos 
\begin_inset Formula $i:=j$
\end_inset

 y volvemos al Paso 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Hierholzer
\end_layout

\begin_layout Plain Layout
Para obtención de tours eulerianos, una mejora del anterior.
 
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
Comenzando con una copia del grafo 
\begin_inset Formula $G'=\left(V',E'\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
Elegimos 
\begin_inset Formula $i\in V'$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Itemize
Si se puede elegir 
\begin_inset Formula $\left(i,j\right)\in E'$
\end_inset

, anotar 
\begin_inset Formula $\left(i,j\right)$
\end_inset

 en el paseo y eliminarla.
\end_layout

\begin_deeper
\begin_layout Plain Layout
Si 
\begin_inset Formula $E'=\emptyset$
\end_inset

, FIN
\end_layout

\begin_layout Plain Layout
Si no, hacemos 
\begin_inset Formula $i:=j$
\end_inset

 y volvemos al Paso 2
\end_layout

\end_deeper
\begin_layout Itemize
Si no se puede elegir 
\begin_inset Formula $\left(i,j\right)$
\end_inset

 de 
\begin_inset Formula $E'$
\end_inset

, reemplazamos 
\begin_inset Formula $i$
\end_inset

 por un vértice ya perteneciente al paseo en el que incida una arista de
 
\begin_inset Formula $E'$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Plain Layout
Sea 
\begin_inset Formula $\left(j,i\right)i\left(i,k\right)$
\end_inset

 un tramo del paseo.
 Hacer 
\begin_inset Formula $e=\left(j,i\right)$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Volvemos al Paso 2, anotando la arista en el interior del paseo a continuación
 de 
\begin_inset Formula $e$
\end_inset

 y reemplazando 
\begin_inset Formula $e$
\end_inset

 por la arista anotada.
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dada una red 
\begin_inset Formula $\left(V,E,l\right)$
\end_inset

 a la determinación del paseo cerrado de mínima longitud que incluye todas
 las aristas de 
\begin_inset Formula $E$
\end_inset

 al menos una vez se le llama 
\series bold
problema del cartero chino
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Dantzig
\end_layout

\begin_layout Plain Layout
Para la obtención de los caminos mínimos entre todo par de vértices
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $D$
\end_inset

 es la matriz de distancias y 
\begin_inset Formula $P$
\end_inset

 la matriz de predecesores
\end_layout

\begin_layout Plain Layout
Hacemos 
\begin_inset Formula $k=1$
\end_inset

 y 
\begin_inset Formula $\forall v_{i},v_{j}\in V$
\end_inset

 hacemos
\begin_inset Formula 
\[
D\left(i,j\right)=\begin{cases}
0 & i=j\\
\infty & otro\ caso
\end{cases}
\]

\end_inset


\begin_inset Formula 
\[
P\left(i,j\right)=i
\]

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Plain Layout
Para 
\begin_inset Formula $i=1,...,k$
\end_inset


\begin_inset Formula 
\[
D\left(i,k+1\right)=\min_{j=1,...,k}\left\{ D\left(i,j\right)+l_{j,k+1}\right\} =D\left(k+1,j\right)
\]

\end_inset


\begin_inset Formula 
\[
P\left(i,k+1\right)=\arg\min_{j=1,...,k}\left\{ D\left(i,j\right)+l_{j,k+1}\right\} 
\]

\end_inset

 es decir, seleccionamos en esta última expresión el 
\begin_inset Formula $j$
\end_inset

 que nos da el mínimo en la expresión anterior.
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $P\left(i,k+1\right)\neq i$
\end_inset

, entonces
\begin_inset Formula 
\[
P\left(k+1,i\right)=P\left(\arg\min_{j=1,...,k}\left\{ D\left(i,j\right)+l_{j,k+1}\right\} ,i\right)
\]

\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $P\left(i,k+1\right)=i$
\end_inset

, entonces
\begin_inset Formula 
\[
P\left(k+1,i\right)=k+1
\]

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Plain Layout
Para todo par 
\begin_inset Formula $i,j=1,...,k$
\end_inset

 hacer
\begin_inset Formula 
\[
D\left(i,j\right)=\min\left\{ D\left(i,j\right),D\left(i,k+1\right)+D\left(k+1,j\right)\right\} 
\]

\end_inset

 es decir, actualizamos la matriz de distancias, la distancia mínima será
 la menor entre la que había antes y la suma de las distancias mínimas correspon
dientes al añadir el nuevo nodo.
\end_layout

\begin_layout Plain Layout
Si el valor cambia respecto al anterior, entonces 
\begin_inset Formula $P\left(i,j\right)=P\left(k+1,j\right)$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Hacer 
\begin_inset Formula $k=k+1$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Si 
\begin_inset Formula $k<n$
\end_inset

, volver al Paso 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
´
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Resolución del problema del cartero chino
\end_layout

\begin_layout Enumerate
Usar el algoritmo de Dantzig para calcular las longitudes de los caminos
 más cortos entre cada par de nodos de la red
\end_layout

\begin_layout Enumerate
Calcular el coste de todos los emparejamientos (de nodos de grado impar)
 posibles sumando las longitudes obtenidas en el paso anterior
\end_layout

\begin_layout Enumerate
Seleccionar el emparejamiento de menor coste
\end_layout

\begin_layout Enumerate
Duplicar, en la red original, todas las aristas pertenecientes a los caminos
 más cortos para el emparejamiento elegido
\end_layout

\begin_layout Enumerate
En el multigrafo euleriano así obtenido, encontrar un ciclo euleriano
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un ciclo en un grafo 
\begin_inset Formula $G$
\end_inset

 es un 
\series bold
ciclo hamiltoniano
\series default
 si contiene a todos los vértices del grafo.
\end_layout

\begin_layout Definition
Si tal ciclo existe, se dice que 
\begin_inset Formula $G$
\end_inset

 es un 
\series bold
grafo hamiltoniano
\series default
.
\end_layout

\begin_layout Definition
Un 
\series bold
camino hamiltoniano
\series default
 es aquel que contiene todos los vértices del grafo.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G$
\end_inset

, se obtiene el 
\series bold
grafo clausura
\series default
, 
\begin_inset Formula $\left[G\right]$
\end_inset

 mediante el proceso interativo siguiente:
\end_layout

\begin_layout Enumerate
Se define 
\begin_inset Formula $G_{0}=\left(V,E_{0}\right):=G,\ j=0$
\end_inset


\end_layout

\begin_layout Enumerate
Mientras exista un par de nodos 
\begin_inset Formula $u,v$
\end_inset

 en 
\begin_inset Formula $G_{j}$
\end_inset

 tales que 
\begin_inset Formula $\left(u,v\right)\notin E_{j}$
\end_inset

 y 
\begin_inset Formula $o\left(u\right)+o\left(v\right)\geq n$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
hacer 
\begin_inset Formula $j=j+1$
\end_inset


\end_layout

\begin_layout Enumerate
hacer 
\begin_inset Formula $E_{j}=E_{j-1}\cup\left\{ \left(u,v\right)\right\} $
\end_inset


\end_layout

\begin_layout Enumerate
hacer 
\begin_inset Formula $G_{j}=\left(V,E_{j}\right)$
\end_inset

, volver a 2.
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Un grafo 
\begin_inset Formula $G$
\end_inset

 es hamiltoniano si, y solo si, su grafo clausura 
\begin_inset Formula $\left[G\right]$
\end_inset

 es hamiltoniano.
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 Evidente, si añadimos ejes a un grafo hamiltoniano sigue siendo hamiltoniano.
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Supongamos que 
\begin_inset Formula $G$
\end_inset

 no es hamiltoniano y 
\begin_inset Formula $\left[G\right]$
\end_inset

 sí que lo es.
 Tendremos entonces una primera arista 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 entre vértices no adyacentes en 
\begin_inset Formula $G_{j}$
\end_inset

, que no es hamiltoniano, tal que 
\begin_inset Formula $G_{j+1}$
\end_inset

 es hamiltoniano.
 Entonces existía un camino hamiltoniano de 
\begin_inset Formula $u$
\end_inset

 a 
\begin_inset Formula $v$
\end_inset

 en 
\begin_inset Formula $G_{j}$
\end_inset

:
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
u=u_{1},...,u_{n}=v
\]

\end_inset

 de forma que 
\begin_inset Formula $u,v$
\end_inset

 verifican que 
\begin_inset Formula $g\left(u\right)+g\left(v\right)\geq n$
\end_inset

 (por eso los habíamos elegidos para añadir 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 a 
\begin_inset Formula $G_{j}$
\end_inset

).
 Sean los conjuntos
\begin_inset Formula 
\[
X=\left\{ i\in\left\{ 3,...,n-1\right\} :\left(u_{i-1},v\right)\in E_{j}\right\} 
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado25.png

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
Y=\left\{ i\in\left\{ 3,...,n-1\right\} :\left(u,u_{i}\in E_{j}\right)\right\} 
\]

\end_inset

 entonces 
\begin_inset Formula $\left|X\right|=g\left(v\right)-1$
\end_inset

 e 
\begin_inset Formula $\left|Y\right|=g\left(u\right)-1$
\end_inset

, por lo que 
\begin_inset Formula $\left|X\right|+\left|Y\right|=g\left(u\right)+g\left(v\right)-2\geq n-2$
\end_inset

.
\end_layout

\begin_layout Proof
Como 
\begin_inset Formula $X,Y\subset\left\{ 3,...,n-1\right\} $
\end_inset

 que tiene 
\begin_inset Formula $n-3$
\end_inset

 elementos, entonces 
\begin_inset Formula $X\cap Y\neq\emptyset$
\end_inset

, o sea 
\begin_inset Formula $\exists k\in X\cap Y$
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Graphics
	filename pegado26.png

\end_inset


\end_layout

\begin_layout Proof
Y si eliminamos 
\begin_inset Formula $\left(u_{k-1},u_{k}\right)$
\end_inset

 entonces tendremos un ciclo hamiltoniano, luego 
\begin_inset Formula $G_{j}$
\end_inset

 es hamiltoniano# pero esto contradice lo que habíamos supuesto.
 Por tanto, 
\begin_inset Formula $G$
\end_inset

 debe ser hamiltoniano.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una 
\begin_inset Formula $n$
\end_inset

-tupla de naturales 
\begin_inset Formula $\left(a_{1},...,a_{n}\right)$
\end_inset

 es una 
\series bold
sucesión hamiltoniana
\series default
 si todos los grafos de 
\begin_inset Formula $n$
\end_inset

 nodos de grados 
\begin_inset Formula $g_{1}\leq...\leq g_{n}$
\end_inset

 que verifican 
\begin_inset Formula $g_{1}\geq a_{1},...,g_{n}\geq a_{n}$
\end_inset

 son hamiltonianos.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Para cualquier 
\begin_inset Formula $n\geq3$
\end_inset

, una 
\begin_inset Formula $n$
\end_inset

-tupla de naturales 
\begin_inset Formula $\left(a_{1},...,a_{n}\right)$
\end_inset

 con 
\begin_inset Formula $a_{1}\leq...\leq a_{n}<n$
\end_inset

 es una sucesión hamiltoniana si, y solo si, para cada 
\begin_inset Formula $i<\frac{n}{2}$
\end_inset

 se satisface
\begin_inset Formula 
\[
a_{i}\leq i\implies a_{n-1}\geq n-i
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Sea 
\begin_inset Formula $G$
\end_inset

 no hamiltoniano con el mayor número posible de aristas (es decir, si añadiésemo
s una arista pasaría a ser hamiltoniano), con grados 
\begin_inset Formula $\left(g_{1},...,g_{n}\right)\geq\left(a_{1},...,a_{n}\right)$
\end_inset

 de forma que
\begin_inset Formula $a_{i}\leq g_{i}\leq i\implies g_{n-i}\geq a_{n-i}\geq n-i$
\end_inset

.
\end_layout

\begin_layout Proof
Sean 
\begin_inset Formula $u,v$
\end_inset

 no adyacentes en 
\begin_inset Formula $G$
\end_inset

 tales que 
\begin_inset Formula $g\left(u\right)+g\left(v\right)$
\end_inset

 es máximo y podemos suponer que 
\begin_inset Formula $g\left(u\right)\leq g\left(v\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Entonces 
\begin_inset Formula $G\cup\left\{ \left(u,v\right)\right\} $
\end_inset

 es hamiltoniano (
\begin_inset Formula $G$
\end_inset

 tenía el mayor número posible de aristas sin ser hamiltoniano).
 Por tanto, en 
\begin_inset Formula $G$
\end_inset

 existe un camino hamiltoniano de 
\begin_inset Formula $u$
\end_inset

 a 
\begin_inset Formula $v$
\end_inset


\begin_inset Formula 
\[
u=u_{1},u_{2},...,u_{n}=v
\]

\end_inset


\end_layout

\begin_layout Proof
Sean
\begin_inset Formula 
\[
S=\left\{ i:\left(u,u_{i+1}\right)\in E\right\} 
\]

\end_inset


\begin_inset Formula 
\[
T=\left\{ i:\left(u_{i},v\right)\in E\right\} 
\]

\end_inset

 Entonces 
\begin_inset Formula $S\cap T=\emptyset$
\end_inset

, porque si no encontramos un ciclo hamiltoniano, como en la demostración
 anterior, y 
\begin_inset Formula $S\cup T\subset\left\{ 1,...,n-1\right\} $
\end_inset

, por lo que 
\begin_inset Formula $g\left(u\right)+g\left(v\right)=\left|S\right|+\left|T\right|<n$
\end_inset

.
\end_layout

\begin_layout Proof
Como 
\begin_inset Formula $g\left(u\right)+g\left(v\right)$
\end_inset

 es maximal, entonces 
\begin_inset Formula $g\left(u_{j}\right)\leq g\left(u\right)<\frac{n}{2},\ \forall j\in S$
\end_inset

 (habíamos supuesto que 
\begin_inset Formula $g\left(u\right)\leq g\left(v\right)$
\end_inset

).
\end_layout

\begin_layout Proof
Así, hay al menos 
\begin_inset Formula $g\left(u\right)=\left|S\right|$
\end_inset

 vértices cuyos grados son menores o iguales que 
\begin_inset Formula $g\left(u\right)$
\end_inset

, por tanto
\begin_inset Formula 
\[
g_{g\left(u\right)}\leq g\left(u\right)\overset{hipótesis}{\implies}g_{n-g\left(u\right)}\geq n-g\left(u\right)
\]

\end_inset

 Por lo que hay al menos 
\begin_inset Formula $g\left(u\right)+1$
\end_inset

 vértices con grado mayor o igual que 
\begin_inset Formula $n-g\left(u\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Como 
\begin_inset Formula $u$
\end_inset

 tiene grado 
\begin_inset Formula $g\left(u\right)$
\end_inset

, no puede estar conectado a todos ellos.
 Por tanto, 
\begin_inset Formula $\exists w|g\left(w\right)\geq n-g\left(u\right)$
\end_inset

 no adyacente a 
\begin_inset Formula $u$
\end_inset

.
\end_layout

\begin_layout Proof
Entonces
\begin_inset Formula 
\[
g\left(u\right)+g\left(w\right)\geq g\left(u\right)+n-g\left(u\right)=n\#
\]

\end_inset

 Lo cual contradice que 
\begin_inset Formula $g\left(u\right)+g\left(v\right)<n$
\end_inset

 fuese maximal.
\end_layout

\begin_layout Proof
Por tanto, 
\begin_inset Formula $G$
\end_inset

 debe ser hamiltoniano y la sucesión es hamiltoniana.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dada una red, la determinación del ciclo hamiltoniano de mínima longitud
 se llama 
\series bold
problema del viajante de comercio
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo de Christofides
\end_layout

\begin_layout Plain Layout
Heurística para el problema del viajante.
\end_layout

\begin_layout Plain Layout
Dada una red con 
\begin_inset Formula $G$
\end_inset

 no dirigido, completo y cuyas distancias verifican la desigualdad triangular:
\end_layout

\begin_layout Plain Layout

\series bold
Paso 1
\end_layout

\begin_layout Plain Layout
Encontrar en 
\begin_inset Formula $G$
\end_inset

 un árbol generador minimal, 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 2
\end_layout

\begin_layout Plain Layout
Sea 
\begin_inset Formula $V_{I}$
\end_inset

 el conjunto de los vértices de grado impar en 
\begin_inset Formula $T$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Sea 
\begin_inset Formula $M$
\end_inset

 el emparejamiento mínimo asociado a 
\begin_inset Formula $V_{I}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
Paso 3
\end_layout

\begin_layout Plain Layout
Sea 
\begin_inset Formula $H=\left(V,T\cup M\right)$
\end_inset

, que es euleriano.
\end_layout

\begin_layout Plain Layout
Sea 
\begin_inset Formula $C$
\end_inset

 un ciclo euleriano en 
\begin_inset Formula $H$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Paso 4
\end_layout

\begin_layout Plain Layout
Obtener 
\begin_inset Formula $C'$
\end_inset

 ciclo hamiltoniano asociado a 
\begin_inset Formula $C$
\end_inset

, saltando los vértices ya visitados hasta un vértice no visitado, o hasta
 el vértice de partida.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El algoritmo de Christofides verifica que, si 
\begin_inset Formula $C^{*}$
\end_inset

 es la solución óptima, entonces
\begin_inset Formula 
\[
l\left(C'\right)\leq\frac{3}{2}l\left(C^{*}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Coloración de grafos.
 Grafos planos
\end_layout

\begin_layout Subsection
Coloración
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo simple y 
\begin_inset Formula $S$
\end_inset

 un conjunto de colores distintos.
 Una 
\series bold
coloración
\series default
 
\series bold
propia por vértices
\series default
 o coloración de 
\begin_inset Formula $G$
\end_inset

 es una aplicación 
\begin_inset Formula $f:V\rightarrow S$
\end_inset

 que asigna colores distintos a vértices adyacentes
\begin_inset Formula 
\[
\left(u,v\right)\in E\implies f\left(u\right)\neq f\left(v\right)
\]

\end_inset

 Cuando 
\begin_inset Formula $\left|S\right|=k$
\end_inset

 se dice que es una 
\series bold

\begin_inset Formula $\boldsymbol{k}$
\end_inset

-coloración
\end_layout

\begin_layout Definition
Un grafo es 
\begin_inset Formula $\boldsymbol{k}$
\end_inset


\series bold
-coloreable 
\series default
si admite una 
\begin_inset Formula $k$
\end_inset

-coloración
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nótese que una 
\begin_inset Formula $k$
\end_inset

-coloración induce una partición del conjunto de vértices 
\begin_inset Formula $V$
\end_inset

 en subconjuntos 
\begin_inset Formula $V_{1},...,V_{k}$
\end_inset

 independientes.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
El 
\series bold
número cromático
\series default
 de un grafo 
\begin_inset Formula $G$
\end_inset

, 
\begin_inset Formula $\mathcal{X}\left(G\right)$
\end_inset

 es el menor número de colores necesario para colorear 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Remark
Algunos números cromáticos:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\mathcal{X}\left(K_{n}\right)=n$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathcal{X}\left(G\right)=1\iff G$
\end_inset

 no tiene ejes, 
\begin_inset Formula $\left|E\right|=0$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathcal{X}\left(G\right)=2\iff G$
\end_inset

 es bipartito y 
\begin_inset Formula $\left|E\right|\geq1$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $T$
\end_inset

 es un árbol, 
\begin_inset Formula $\mathcal{X}\left(T\right)=2$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $C_{n}$
\end_inset

 es el ciclo de tamaño 
\begin_inset Formula $n$
\end_inset


\begin_inset Formula 
\[
\mathcal{X}\left(C_{n}\right)=\begin{cases}
2 & n\ par\\
3 & n\ impar
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $H$
\end_inset

 es un subgrafo de 
\begin_inset Formula $G$
\end_inset

, entonces 
\begin_inset Formula $\mathcal{X}\left(H\right)\leq\mathcal{X}\left(G\right)$
\end_inset


\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $K_{q}$
\end_inset

 es subgrafo de 
\begin_inset Formula $G$
\end_inset

, entonces 
\begin_inset Formula $\mathcal{X}\left(G\right)\geq q$
\end_inset


\end_layout

\end_deeper
\begin_layout Remark
El número cromático de un grafo coincide con el mínimo número de conjuntos
 independientes en que se puede particionar 
\begin_inset Formula $V$
\end_inset

.
\end_layout

\begin_layout Remark
\begin_inset Flex Color Box
status open

\begin_layout Plain Layout

\series bold
Algoritmo heurístico Greedy para colorear un grafo
\end_layout

\begin_layout Plain Layout
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo simple
\end_layout

\begin_layout Plain Layout

\series bold
Paso Inicial
\end_layout

\begin_layout Plain Layout
Ordenar los vértices de 
\begin_inset Formula $V=\left\{ v_{1},...,v_{n}\right\} $
\end_inset

.
\end_layout

\begin_layout Plain Layout
Ordenar los colores 
\begin_inset Formula $S=\left\{ 1,2,...\right\} $
\end_inset

.
\end_layout

\begin_layout Plain Layout
Hacer 
\begin_inset Formula $k=1$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
Paso general
\end_layout

\begin_layout Plain Layout
Asignar a 
\begin_inset Formula $v_{k}$
\end_inset

 el primer color en 
\begin_inset Formula $S$
\end_inset

 el primer color en 
\begin_inset Formula $S$
\end_inset

 que no ha sido asignado previamente a ninguno de sus nodos adyacentes del
 conjunto 
\begin_inset Formula $\left\{ v_{1},...,v_{k}\right\} $
\end_inset

.
\end_layout

\begin_layout Plain Layout
Hacer 
\begin_inset Formula $k=k+1$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Remark
Este algoritmo no garantiza que la coloración sea óptima, y el resultado
 es dependiente de la forma en la que se ordenan los nodos y los colores
 en el paso inicial.
\end_layout

\begin_layout Remark
Dado que en cada paso del algoritmo se comparan los colores de los vecinos
 de un nodo y se elige el primero disponible, nunca harán falta más colores
 que el grado mayor más 1.
 Así, parece preferible ordenar los nodos en orden decreciente de grado.
\end_layout

\begin_layout Remark
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Para todo grafo 
\begin_inset Formula $G$
\end_inset


\begin_inset Formula 
\[
\mathcal{X}\left(G\right)\leq\Delta_{G}+1
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Remark
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
de Brooks
\end_layout

\begin_layout Theorem
Sea G un grafo conexo que no es ni un grafo completo ni un ciclo de longitud
 impar.
 Entonces
\begin_inset Formula 
\[
\mathcal{X}\left(G\right)\leq\Delta_{G}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Grafos críticos
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un grafo 
\begin_inset Formula $G$
\end_inset

 es 
\series bold
crítico
\series default
 si para cada subgrafo 
\begin_inset Formula $H$
\end_inset

 de 
\begin_inset Formula $G$
\end_inset

 se tiene que 
\begin_inset Formula $\mathcal{X}\left(H\right)<\mathcal{X}\left(G\right)$
\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Formula $G$
\end_inset

 es 
\series bold
crítico por ejes
\series default
 si 
\begin_inset Formula $\mathcal{X}\left(G-e\right)<\mathcal{X}\left(G\right),\ \forall e\in E$
\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Formula $G$
\end_inset

 es 
\series bold
crítico por vértices
\series default
 si 
\begin_inset Formula $\mathcal{X}\left(G-v\right)<\mathcal{X}\left(G\right),\ \forall v\in V$
\end_inset


\end_layout

\begin_layout Definition
Un grafo crítico con 
\begin_inset Formula $\mathcal{X}\left(G\right)=k$
\end_inset

 se denomina 
\begin_inset Formula $\boldsymbol{k}$
\end_inset


\series bold
-crítico
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se verifica:
\end_layout

\begin_layout Itemize
\begin_inset Formula $G$
\end_inset

 crítico 
\begin_inset Formula $\iff$
\end_inset


\begin_inset Formula $G$
\end_inset

 crítico por ejes y por vértices
\end_layout

\begin_layout Itemize
\begin_inset Formula $G$
\end_inset

 crítico por ejes y no tiene vértices aislados 
\begin_inset Formula $\implies$
\end_inset

 
\begin_inset Formula $G$
\end_inset

 crítico por vértices
\end_layout

\begin_layout Itemize
\begin_inset Formula $G$
\end_inset

 crítico por vértices no implica crítico por ejes, como contraejemplo se
 tiene el grafo circulante 
\begin_inset Formula $C\left(7,2\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename pegado27.png

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Cada grafo G de orden 
\begin_inset Formula $n\geq2$
\end_inset

 contiene un subgrafo crítico H tal que 
\begin_inset Formula $\mathcal{X}\left(G\right)=\mathcal{X}\left(H\right)$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Si 
\begin_inset Formula $G$
\end_inset

 es crítico, ya está.
\end_layout

\begin_layout Proof
Si no es crítico, entonces existe 
\begin_inset Formula $e_{1}\in E:\mathcal{X}\left(G-e_{1}\right)=\mathcal{X}\left(G\right)$
\end_inset

.
 Llamamos 
\begin_inset Formula $H_{1}=G-e_{1}$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Si 
\begin_inset Formula $H_{1}$
\end_inset

 es crítico, ya está
\end_layout

\begin_layout Itemize
Si no es crítico, entonces existe 
\begin_inset Formula $e_{2}\in E:\mathcal{X}\left(G-e_{2}\right)=\mathcal{X}\left(G\right)$
\end_inset

.
 Llamamos 
\begin_inset Formula $H_{2}=G-e_{2}$
\end_inset

:
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout Standard
Como 
\begin_inset Formula $E$
\end_inset

 es finito, en algún momento se alcanza 
\begin_inset Formula $H_{n}$
\end_inset

 un subgrafo de 
\begin_inset Formula $G$
\end_inset

 crítico y tal que 
\begin_inset Formula ${\cal X}\left(H\right)={\cal X}\left(G\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Si 
\begin_inset Formula $G$
\end_inset

 es un grafo crítico, entonces 
\begin_inset Formula ${\cal X}\left(G\right)\leq\delta_{G}+1$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Supongamos que 
\begin_inset Formula $G$
\end_inset

 es 
\begin_inset Formula $k$
\end_inset

-crítico.
\end_layout

\begin_layout Proof
Supongamos que 
\begin_inset Formula $\delta_{G}\leq k-2$
\end_inset


\end_layout

\begin_layout Proof
Sea 
\begin_inset Formula $v\in V$
\end_inset

 un vértice de menor grado.
\end_layout

\begin_layout Proof
Como 
\begin_inset Formula $G$
\end_inset

 es crítico
\begin_inset Formula 
\[
{\cal X}\left(G-v\right)={\cal X}\left(G\right)-1
\]

\end_inset

 pues al quitar un vértice, quitamos sus ejes adyacentes, por ser crítico
 este número debe ser menor que el original.
 Pero como solo quitamos un vértice, como mucho disminuye en una unidad.
\end_layout

\begin_layout Proof
Así, en una coloración de 
\begin_inset Formula $G-v$
\end_inset

 se utilizarían, a lo sumo, 
\begin_inset Formula $k-2$
\end_inset

 colores para colorear los vértices adyacentes a 
\begin_inset Formula $v$
\end_inset

 en 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Proof
Luego hay, al menos, un color que no se ha utilizado.
 Pintando 
\begin_inset Formula $v$
\end_inset

 de ese color, tendríamos una 
\begin_inset Formula $k-1$
\end_inset

-coloración de 
\begin_inset Formula $G$
\end_inset

# contradicción.
 Por tanto, debe ser 
\begin_inset Formula 
\[
\delta_{G}>k-2\implies k<\delta_{G}+2\implies k\leq\delta_{G}+1
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Polinomio cromático
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un grafo 
\begin_inset Formula $G$
\end_inset

, su 
\series bold
polinomio cromático
\series default
, 
\begin_inset Formula $p\left(G,k\right)$
\end_inset

 se define como el número de formas de colorear el grafo 
\begin_inset Formula $G$
\end_inset

 con a lo sumo 
\begin_inset Formula $k$
\end_inset

 colores.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Claramente, 
\begin_inset Formula $p\left(G,k\right)=0,\ \forall k<{\cal X}\left(G\right)$
\end_inset

.
\end_layout

\begin_layout Remark
Algunos polinomios cromáticos:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $p\left(K_{n},k\right)=k\cdot\left(k-1\right)\cdot...\cdot\left(k-n+1\right)=\left[\frac{k!}{n!}\right],\ \forall k\geq0$
\end_inset


\end_layout

\begin_layout Itemize
si 
\begin_inset Formula $P_{n}$
\end_inset

 es el grafo cadena de 
\begin_inset Formula $n$
\end_inset

 nodos, entonces 
\begin_inset Formula $p\left(P_{n},k\right)=k\left(k-1\right)^{n-1},\ \forall k\geq0$
\end_inset


\end_layout

\end_deeper
\begin_layout Remark
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 un grafo simple y 
\begin_inset Formula $e=\left(u,v\right)\in E$
\end_inset

.
 El grafo 
\begin_inset Formula $G\circ e$
\end_inset

 se denomina 
\series bold
grafo contrario
\series default
 y es el grafo resultante de contraer los nodos 
\begin_inset Formula $u$
\end_inset

 y 
\begin_inset Formula $v$
\end_inset

 en uno solo y reducir a uno los posibles ejes paralelos.
\end_layout

\begin_layout Definition
En concreto, 
\begin_inset Formula $G\circ e=\left(V',E'\right)$
\end_inset

 donde
\end_layout

\begin_layout Itemize
\begin_inset Formula $V'=\left(V\setminus\left\{ u,v\right\} \right)\cup\left\{ uv\right\} $
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $E'=E_{V\setminus\left\{ u,v\right\} }\cup\left\{ \left(uv,i\right):\left(u,i\right)\in E\ o\ \left(v,i\right)\in E\right\} $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Remark
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
de Reducción
\end_layout

\begin_layout Theorem
Sea 
\begin_inset Formula $G$
\end_inset

 un grafo simple y 
\begin_inset Formula $u,v$
\end_inset

 dos vértices no adyacentes en 
\begin_inset Formula $G$
\end_inset

.
 Sea 
\begin_inset Formula $e=\left(u,v\right)$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
p\left(G,k\right)=p\left(G+e,k\right)+p\left(G\circ e,k\right)
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Remark
\begin_inset Flex Color Box
status open

\begin_layout Corollary
Sea G un grafo simple y 
\begin_inset Formula $\left(u,v\right)\in E$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
p\left(G,k\right)=p\left(G-e,k\right)-p\left(G\circ e,k\right)
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Remark
\begin_inset Flex Color Box
status open

\begin_layout Proposition
El polinomio cromático 
\begin_inset Formula $p\left(G,k\right)$
\end_inset

 de un grafo 
\begin_inset Formula $G$
\end_inset

 de orden n tiene grado n.
\end_layout

\begin_layout Proposition
El coeficiente de término 
\begin_inset Formula $k^{n}$
\end_inset

 es 1, el término independiente es 0 y los coeficientes de los términos
 intermedios son enteros y se alternan en signo.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Planaridad
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un grafo es un 
\series bold
grafo planar
\series default
 si existe una representación de 
\begin_inset Formula $G$
\end_inset

 en el plano de modo que ningún par de ejes se cruza entre sí.
\end_layout

\begin_layout Definition
Una representación concreta de un grafo planar en el que ningún par de ejes
 se cruza entre sí se denomina 
\series bold
grafo plano 
\series default
(o embutido).
\end_layout

\end_inset


\end_layout

\begin_layout Remark
Algunos grafos planares:
\end_layout

\begin_deeper
\begin_layout Itemize
Cualquier ciclo de orden 
\begin_inset Formula $n$
\end_inset

, 
\begin_inset Formula $C_{n}$
\end_inset

, es planar
\end_layout

\begin_layout Itemize
Cualquier grafo cadena, 
\begin_inset Formula $P_{n}$
\end_inset

, es planar
\end_layout

\begin_layout Itemize
Cualquier estrella es planar
\end_layout

\begin_layout Itemize
Cualquier árbol es planar
\end_layout

\end_deeper
\begin_layout Subsubsection
Identidad de Euler
\end_layout

\begin_layout Standard
Cualquier grafo plano divide 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

 en un conjunto de regiones denominadas 
\series bold
caras
\series default
.
 Como el grafo es acotado, una de las caras es no acotada y se denomina
 
\series bold
cara externa
\series default
.
 El 
\series bold
contorno
\series default
 de una cara es la unión de los ejes y vértices incidentes a dicha cara.
\end_layout

\begin_layout Standard
En un grafo plano se verifican las siguientes propiedades:
\end_layout

\begin_layout Itemize
Dos caras son disjuntas y sus contornos solo se intersecan en los ejes
\end_layout

\begin_layout Itemize
Hay una única cara externa
\end_layout

\begin_layout Itemize
El interior de cada ciclo de 
\begin_inset Formula $G$
\end_inset

 contiene al menos una cara interna
\end_layout

\begin_layout Itemize
Un puente pertenece al contorno de una sola cara (y viceversa)
\end_layout

\begin_layout Itemize
Un eje que no es puente pertenece al contorno de dos caras (y viceversa)
\end_layout

\begin_layout Itemize
Se define el 
\series bold
grado de una cara
\series default
 
\begin_inset Formula $F$
\end_inset

, 
\begin_inset Formula $d\left(F\right),$
\end_inset

 como el número de ejes incidentes a la misma, teniendo en cuenta que los
 puentes cuentan con grado 2.
 Por tanto
\begin_inset Formula 
\[
\sum_{F}d\left(F\right)=2m
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pegado20.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
Identidad de Euler
\end_layout

\begin_layout Theorem
Si 
\begin_inset Formula $G$
\end_inset

 es un grafo plano conexo con 
\begin_inset Formula $n$
\end_inset

 vértices, 
\begin_inset Formula $m$
\end_inset

 ejes y 
\begin_inset Formula $c$
\end_inset

 caras, se cumple que 
\begin_inset Formula $n-m+c=2$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Inducción sobre 
\begin_inset Formula $c$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $c=1$
\end_inset

, entonces 
\begin_inset Formula $G$
\end_inset

 no tiene ciclos y es conexo, por lo que es un árbol y entonces 
\begin_inset Formula $m=n-1$
\end_inset

, por tanto
\begin_inset Formula 
\[
n-m+c=n-n+1+1=2\ \checkmark
\]

\end_inset


\end_layout

\begin_layout Itemize
Supongamos que es cierto para 
\begin_inset Formula $c-1$
\end_inset

 caras y que 
\begin_inset Formula $G$
\end_inset

 tiene 
\begin_inset Formula $c\geq2$
\end_inset

 caras.
\end_layout

\begin_deeper
\begin_layout Standard
Como 
\begin_inset Formula $c\geq2$
\end_inset

, entonces 
\begin_inset Formula $G$
\end_inset

 tiene al menos un ciclo 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $e\in C$
\end_inset

, que no es un puente.
 Entonces 
\begin_inset Formula $G-e$
\end_inset

 tiene 
\begin_inset Formula $n-1$
\end_inset

 caras y 
\begin_inset Formula $G-e$
\end_inset

 sigue siendo conexo.
 Por la inducción, tenemos que
\begin_inset Formula 
\[
n-\left(m-1\right)+\left(c-1\right)=2\implies n-m+c=2
\]

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Corollary
Todos los grafos planos de un grafo planar tienen el mismo número de caras
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Si G es un grafo planar con 
\begin_inset Formula $n\geq3$
\end_inset

, entonces 
\begin_inset Formula $m\leq3n-6$
\end_inset

.
\end_layout

\begin_layout Proposition
Si 
\begin_inset Formula $G$
\end_inset

 no contiene a 
\begin_inset Formula $K_{3}$
\end_inset

, entonces 
\begin_inset Formula $m\leq2n-4$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Veamos primero el resultado general.
\end_layout

\begin_layout Proof
Si 
\begin_inset Formula $m\leq2$
\end_inset

, es trivial (
\begin_inset Formula $n\geq3$
\end_inset

 por hipótesis)
\end_layout

\begin_layout Proof
Si 
\begin_inset Formula $m\geq3$
\end_inset

, entonces el contorno en cada cara tiene, al menos, 3 ejes:
\begin_inset Formula 
\[
3c\leq\sum_{F}d\left(F\right)=2m\implies3\left(2-n+m\right)\leq2m\implies6-3n+3m\leq2m\implies m\leq3n-6
\]

\end_inset


\end_layout

\begin_layout Proof
Y tenemos el resultado.
\end_layout

\begin_layout Proof
Si ahora 
\begin_inset Formula $G$
\end_inset

 no contiene a 
\begin_inset Formula $K_{3}$
\end_inset

, entonces cualquier cara está contorneada por, al menos, 4 ejes
\begin_inset Formula 
\[
4c\leq2m\implies2c\leq m\implies2\left(2-n+m\right)\leq m\implies4-2n+2m\leq m\implies m\leq2n-4
\]

\end_inset


\end_layout

\begin_layout Remark
Este resultado proporciona condiciones necesarias, pero no suficientes.
 Como contraejemplo encontramos el grafo de Petersen.
\end_layout

\begin_layout Subsubsection
Grafo planar maximal
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un grafo planar es 
\series bold
maximal
\series default
 si la adición de cualquier arista lo convierte en no planar.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Lemma
Sea 
\begin_inset Formula $F$
\end_inset

 una cara de un grafo plano 
\begin_inset Formula $G$
\end_inset

 con al menos cuatro ejes en su contorno.
 Entonces hay dos vértices no adyacentes en 
\begin_inset Formula $F$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Corollary
Si 
\begin_inset Formula $G$
\end_inset

 es un grafo planar maximal con 
\begin_inset Formula $n\geq3$
\end_inset

, el contorno de cada cara de un grafo plano de 
\begin_inset Formula $G$
\end_inset

 tiene exactamente 
\begin_inset Formula $3$
\end_inset

 aristas.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
En todo grafo planar maximal se verifica que 
\begin_inset Formula $m=3n-6$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Teorema de Kuratowski
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una 
\series bold
subdivisión de un eje 
\series default

\begin_inset Formula $e=\left(u,v\right)$
\end_inset

 de un grafo 
\begin_inset Formula $G$
\end_inset

 se obtiene introduciendo en 
\begin_inset Formula $G$
\end_inset

 un nuevo vértice 
\begin_inset Formula $w$
\end_inset

 y reemplazando el eje 
\begin_inset Formula $e$
\end_inset

 por los ejes 
\begin_inset Formula $\left(u,w\right),\ \left(w,v\right)$
\end_inset

.
 El grafo resultante de realizar sucesivas subdivisiones sobre los ejes
 de un grafo 
\begin_inset Formula $G$
\end_inset

 se denomina 
\series bold
subdivisión 
\series default
de 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
de Kuratowski
\end_layout

\begin_layout Theorem
Un grafo es planar si, y solo si, no contiene como subgrafo ninguna subdivisión
 de 
\begin_inset Formula $K_{5}$
\end_inset

 ni de 
\begin_inset Formula $K_{3,3}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Coloración en grafos.
 El teorema de los 4 colores
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
de los 4 colores
\end_layout

\begin_layout Theorem
Todo grafo planar se puede colorear con, a lo sumo, 4 colores
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Programación lineal entera
\end_layout

\begin_layout Subsection
El modelo de programación lineal entera
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un 
\series bold
modelo de programación lineal entera
\series default
 es un modelo de programación lineal en el que algunas o todas las variables
 de decisión deben tomar valores enteros.
\end_layout

\begin_deeper
\begin_layout Plain Layout
El modelo general con 
\begin_inset Formula $n$
\end_inset

 varaibles de decisión y 
\begin_inset Formula $m$
\end_inset

 restricciones se puede expresar del siguiente modo:
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
\begin{array}{cc}
\left(P_{E}\right)\max & \sum_{i=1}^{n}c_{i}x_{i}\\
s.a.\\
 & \sum_{i=1}^{n}a_{ji}x_{i}\leq b_{j},\ \forall j=1,...,m\\
 & x_{i}\geq0,\ \forall i=1,...,n\\
 & x_{i}\in\mathbb{Z},\ \forall i\in I\subset\left\{ 1,...,n\right\} 
\end{array}
\]

\end_inset

 Cuando todas las variables de decisión son enteras, el problema se denomina
 
\series bold
entero puro
\series default
, cuando no son todas, se dice 
\series bold
entero mixto
\series default
.
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
En este tipo de problemas se pueden aplicar las mismas transformaciones
 que en un problema de programación lineal:
\end_layout

\begin_layout Itemize
Modificar el sentido de optimización del problema
\end_layout

\begin_layout Itemize
Cambiar el sentido de una restricción
\end_layout

\begin_layout Itemize
Convertir una restricción de igualdad en dos restricciones de desigualdad
\end_layout

\begin_layout Itemize
Transformar variables negativas en positivas
\end_layout

\begin_layout Itemize
Transformar una variable no restringida en dos variables positivas
\end_layout

\begin_layout Standard
Recordemos que, en programación lineal, la región factible era una región
 convexa, concretamente un poliedro.
 Esto no es así ahora, en los modelos de PLE la región factible no tiene
 por qué ser un poliedro, incluso puede no ser convexa.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Dado un problema de programación lineal entera 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

, denotaremos por 
\begin_inset Formula $\left(P_{L}\right)$
\end_inset

 al problema lineal asociado resultante de eliminar de las variables las
 restricciones de integridad.
 Este problema se denomina 
\series bold
relajación lineal
\series default
 del problema 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
\begin{array}{cc}
\left(P_{E}\right)\max & \sum_{i=1}^{n}c_{i}x_{i}\\
s.a.\\
 & \sum_{i=1}^{n}a_{ji}x_{i}\leq b_{j},\ \forall j=1,...,m\\
 & x_{i}\geq0,\ \forall i=1,...,n
\end{array}
\]

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Remark
El valor óptimo 
\begin_inset Formula $z_{L}$
\end_inset

 de la relajación lineal de un modelo PLE es al menos tan bueno como el
 valor óptimo 
\begin_inset Formula $z_{E}$
\end_inset

 del problema entero.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Remark
En los modelos de PLE se pueden contruir infinidad de problemas con distintos
 conjuntos de restricciones, pero con la misma región factible.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
El siguiente resultado pone de manifiesto que si los coeficientes de las
 restricciones son racionales, la envoltura convexa del conjunto factible
 es un poliedro.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Dadas matrices de coeficientes racionales A, G y un vector de coeficientes
 racionales b, sea 
\begin_inset Formula $P=\left\{ \left(x,y\right):Ax+Gy\leq b\right\} $
\end_inset

 y sea 
\begin_inset Formula $S=\left\{ \left(x,y\right)\in P:x\ entero\right\} $
\end_inset

.
\end_layout

\begin_layout Theorem
Entonces, existen matrices racionales 
\begin_inset Formula $A',\ G'$
\end_inset

 y un vector de coeficientes racionales 
\begin_inset Formula $b'$
\end_inset

 tales que
\begin_inset Formula 
\[
conv\left(S\right)=\left\{ \left(x,y\right):A'x+G'y\leq b'\right\} 
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los problemas lineales enteros pueden ser no acotados o infactibles.
 El siguiente resultado indica que si un problema lineal entero es factible,
 podemos establecer si es acotado o no mediante su relajación lineal.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Sea 
\begin_inset Formula $P=\left\{ x\in\mathbb{R}^{n}:Ax\leq b\right\} $
\end_inset

 un poliedro de coeficientes racionales tal que el poliedro 
\begin_inset Formula $P_{I}=conv\left(P\cap\mathbb{Z}^{n}\right)$
\end_inset

 sea no vacío.
 Sea 
\begin_inset Formula $c\in\mathbb{R}^{n}$
\end_inset

.
\end_layout

\begin_layout Proposition
El problema 
\begin_inset Formula $\max\left\{ c'x:x\in P_{I}\right\} $
\end_inset

 es acotado si, y solo si, 
\begin_inset Formula $\max\left\{ c'x:x\in P\right\} $
\end_inset

 es acotado.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Matrices totalmente unimodulares
\end_layout

\begin_layout Standard
En algunos PLE, la solución del correspondiente problema lineal relajado
 da directamente una solución entera.
\end_layout

\begin_layout Standard
Cuando un poliedro tiene sus puntos extremos con coordenadas enteras, independie
ntemente de la función a optimizar, la solución será entera.
 Tiene sentido preguntarse si podemos establecer condiciones bajo las cuales
 todos los puntos extremos de un poliedro tengan coordenadas enteras.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una matriz 
\begin_inset Formula $A$
\end_inset

 se dice que es 
\series bold
totalmente unimodular
\series default
 si el determinante de cualquier submatriz cuadrada de 
\begin_inset Formula $A$
\end_inset

 vale 
\begin_inset Formula $1,-1$
\end_inset

 ó 0
\end_layout

\begin_layout Definition
Una matriz es 
\series bold
entera
\series default
 si todas sus entradas son números enteros
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Esto implica, en particular, que todas las entradas de una matriz totalmente
 unimodular tienen que ser 1,-1 ó 0.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Sea 
\begin_inset Formula $A$
\end_inset

 de tamaño 
\begin_inset Formula $m\times n$
\end_inset

 y rango 
\begin_inset Formula $m$
\end_inset

, 
\begin_inset Formula $A$
\end_inset

 es 
\series bold
unimodular
\series default
 si sus coeficientes son enteros y el determinante de cualquier submatriz
 invertible de orden 
\begin_inset Formula $m$
\end_inset

 es 1 ó -1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Lemma

\series bold
Lema 1
\end_layout

\begin_layout Lemma
Una matriz A es totalmente unimodular si y solo si 
\begin_inset Formula $\left[I,A\right]$
\end_inset

 es unimodular
\end_layout

\end_inset


\end_layout

\begin_layout Proof
El determinante de cualquier submatriz cuadrada de 
\begin_inset Formula $A$
\end_inset

 es 
\begin_inset Formula $\pm1$
\end_inset

 si, y solo si, el determinante de cualquier submatriz de orden 
\begin_inset Formula $m$
\end_inset

 de 
\begin_inset Formula $\left(I|A\right)$
\end_inset

 es 
\begin_inset Formula $\pm1$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Un poliedro 
\begin_inset Formula $P\subset\mathbb{R}^{n}$
\end_inset

 se dice 
\series bold
entero
\series default
 si todos sus puntos extremos son enteros
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Lemma

\series bold
Lema 2
\end_layout

\begin_layout Lemma
x es un punto extremo de 
\begin_inset Formula $P=\left\{ x\in\mathbb{R}^{n}:Ax\leq b,\ x\geq0\right\} $
\end_inset

 si, y solo si, 
\begin_inset Formula $\left(x,b-Ax\right)$
\end_inset

 es un punto extremo de 
\begin_inset Formula $Q=\left\{ \left(x,y\right)\in\mathbb{R}^{n+m}:Ax+Iy=b,\ x,y\geq0\right\} $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset


\begin_inset Formula 
\[
Ax\leq b\implies b-Ax\geq0\implies\left(x,b-Ax\right)\geq0
\]

\end_inset


\begin_inset Formula 
\[
Ax+I\left(b-Ax\right)=b
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 
\begin_inset Formula 
\[
\left(x,b-Ax\right)\geq0\implies b-Ax\geq0\implies Ax\leq b
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Lemma

\series bold
Lema 3 (de Voinott y Dantzig)
\end_layout

\begin_layout Lemma
Sea A una matriz entera de tamaño 
\begin_inset Formula $m\times n$
\end_inset

 y rango 
\begin_inset Formula $m$
\end_inset

.
 
\end_layout

\begin_layout Lemma
A es unimodular si, y solo si, para cada 
\begin_inset Formula $b\in\mathbb{Z}^{m}$
\end_inset

 el poliedro 
\begin_inset Formula $Q=\left\{ x\in\mathbb{R}^{n}:Ax=b,\ x\geq0\right\} $
\end_inset

 es entero
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 
\begin_inset Formula $A$
\end_inset

 unimodular.
 Sean 
\begin_inset Formula $b\in\mathbb{Z}^{m}$
\end_inset

 y 
\begin_inset Formula $x$
\end_inset

 un punto extremo de 
\begin_inset Formula $Q$
\end_inset

.
\end_layout

\begin_layout Proof
Entonces 
\begin_inset Formula $x$
\end_inset

 es SBF (solución básica factible) y se puede escribir
\begin_inset Formula 
\[
x=\left(B^{-1}b,0\right)
\]

\end_inset

 donde 
\begin_inset Formula $B$
\end_inset

 es una submatriz cuadrada de orden 
\begin_inset Formula $m$
\end_inset

 de 
\begin_inset Formula $A$
\end_inset

, no singular (matriz básica).
\end_layout

\begin_layout Proof
Como 
\begin_inset Formula $B^{-1}=\frac{adj\left(B\right)}{\left|B\right|}$
\end_inset

 y 
\begin_inset Formula $B$
\end_inset

 es entera, entonces 
\begin_inset Formula $B^{-1}$
\end_inset

 es entera, y, por tanto, 
\begin_inset Formula $B^{-1}b$
\end_inset

 es entero.
 Así, 
\begin_inset Formula $x$
\end_inset

 es entero, y entonces 
\begin_inset Formula $Q$
\end_inset

 es entero.
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset

 Sea 
\begin_inset Formula $B$
\end_inset

 una submatriz (entera) no singular de 
\begin_inset Formula $A$
\end_inset

 de orden 
\begin_inset Formula $m$
\end_inset

, ¿se tendrá 
\begin_inset Formula $\left|B\right|=\pm1$
\end_inset

?
\end_layout

\begin_layout Proof
Existe 
\begin_inset Formula $y\in\mathbb{Z}^{m}$
\end_inset

 tal que 
\begin_inset Formula $z=y+B^{-1}e^{i}\geq0\implies b=Bz=By+e^{i}\in\mathbb{Z}$
\end_inset


\end_layout

\begin_layout Proof
Por tanto, 
\begin_inset Formula $\left(z,0\right)$
\end_inset

 es SBF del sistema 
\begin_inset Formula 
\[
\begin{cases}
Ax=b\\
x\geq0
\end{cases}
\]

\end_inset

 y, entonces 
\begin_inset Formula $\left(z,0\right)$
\end_inset

 es punto extremo de 
\begin_inset Formula $Q$
\end_inset

 (expresado respecto de la matriz básica 
\begin_inset Formula $B$
\end_inset

).
 Por tanto, como 
\begin_inset Formula $Q$
\end_inset

 es entero, 
\begin_inset Formula $z\in\mathbb{Z}^{m}\implies z-y=B^{-1}e^{i}$
\end_inset

 es entero, y eso quiere decir que la 
\begin_inset Formula $i-$
\end_inset

ésima columna de 
\begin_inset Formula $B^{-1}$
\end_inset

 es entera, pero podemos hacerlo con cualquier 
\begin_inset Formula $i$
\end_inset

, por lo que 
\begin_inset Formula $B^{-1}$
\end_inset

 es entera.
\end_layout

\begin_layout Proof
Eso quiere decir que 
\begin_inset Formula $\left|B\right|,\left|B^{-1}\right|\in\mathbb{Z}$
\end_inset

 y dado que 
\begin_inset Formula $\left|B\right|\left|B^{-1}\right|=1$
\end_inset

, debe ser
\begin_inset Formula 
\[
\left|B\right|=\left|B^{-1}\right|=\pm1
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem

\series bold
Hoffman y Kruskal
\end_layout

\begin_layout Theorem
Sea A una matriz entera de tamaño 
\begin_inset Formula $m\times n$
\end_inset

.
 A es totalmente unimodular si, y solo si, para cualquier vector b de componente
s enteras, los puntos extremos del poliedro 
\begin_inset Formula $\left\{ x\in\mathbb{R}^{n}:Ax\leq b,\ x\geq0\right\} $
\end_inset

 tienen componentes enteras
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $A$
\end_inset

 es totalmente unimodular 
\begin_inset Formula $\overset{Lema\ 1}{\iff}\left[I,A\right]$
\end_inset

 es unimodular
\begin_inset Formula $\overset{Lema\ 3}{\iff}$
\end_inset

 
\begin_inset Formula $Q=\left\{ x:Ax+Iy=b,\ x,y\geq0\right\} $
\end_inset

 es entero, para todo 
\begin_inset Formula $b\in\mathbb{Z}^{m}\overset{Lema\ 2}{\iff}$
\end_inset


\begin_inset Formula $\left\{ x:Ax\leq b,\ x\geq0\right\} $
\end_inset

 es entero, para todo 
\begin_inset Formula $b\in\mathbb{Z}^{m}$
\end_inset


\end_layout

\begin_layout Subsubsection
Resultados y caracterizaciones de matrices totalmente unimodulares
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Para una matriz A las siguientes condiciones son equivalentes:
\end_layout

\begin_deeper
\begin_layout Itemize
A es totalmente unimodular
\end_layout

\begin_layout Itemize
A' es totalmente unimodular
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left[A,I\right]$
\end_inset

 es totalmente unimodular
\end_layout

\begin_layout Itemize
La matriz obtenida al eliminar o añadir de A un vector fila o columna unitario
 (un vector de la matriz identidad) es totalmente unimodular
\end_layout

\begin_layout Itemize
La matriz obtenida de multiplicar una fila o columna de A por -1 es totalmente
 unimodular
\end_layout

\begin_layout Itemize
La matriz obtenida de intercambiar dos filas o columnas de A es totalmente
 unimodular
\end_layout

\begin_layout Itemize
La matriz obtenida de duplicar columnas o filas de A es totalmente unimodular
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una 
\series bold
matriz euleriana
\series default
 es aquella en la que la suma de los elementos de cada fila y cada columna
 es par
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Una matriz A es totalmente unimodular si, y solo si
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a_{ij}\in\left\{ 0,1-1\right\} ,\ \forall i,j$
\end_inset

, y
\end_layout

\begin_layout Itemize
la suma de los elementos de cada submatriz cuadrada euleriana es múltiplo
 de 4
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Una matriz A de tamaño 
\begin_inset Formula $m\times n$
\end_inset

 es totalmente unimodular si, y solo si, para cada conjunto de filas 
\begin_inset Formula $F\subset\left\{ 1,...,m\right\} $
\end_inset

 existe una partición 
\begin_inset Formula $F=F_{1}\cup F_{2}$
\end_inset

 tal que
\begin_inset Formula 
\[
\left|\sum_{i\in F_{1}}a_{ij}-\sum_{i\in F_{2}}a_{ij}\right|\leq1,\ \forall j=1,...n
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Remark
Como una matriz es totalmente unimodular si, y solo si, su traspuesta lo
 es, el teorema anterior se puede reescribir en relación al conjunto de
 columnas.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Theorem
Si una matriz A satisface que:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a_{ij}\in\left\{ 0,1,-1\right\} ,\ \forall i,j$
\end_inset


\end_layout

\begin_layout Itemize
cada columna contiene a lo sumo dos elementos no nulos
\end_layout

\begin_layout Itemize
las filas de A se pueden particionar en dos conjuntos 
\begin_inset Formula $F_{1}$
\end_inset

 y 
\begin_inset Formula $F_{2}$
\end_inset

 tal que dos entradas no nulas en una misma columna pertenecen al mismo
 conjunto de filas si tienen signo diferente y están en conjuntos de filas
 distintos si tienen el mismo signo
\end_layout

\end_deeper
\begin_layout Theorem
Entonces A es totalmente unimodular
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Corollary
Si una matriz A con coeficientes 
\begin_inset Formula $\left\{ 1,-1,0\right\} $
\end_inset

 contiene en cada columna a lo sumo un coeficiente 1 y un coeficiente -1,
 entonces es unimodular
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una matriz A de tamaño 
\begin_inset Formula $m\times n$
\end_inset

 con coeficientes 
\begin_inset Formula $\left\{ 1,0\right\} $
\end_inset

 se dice que es una 
\series bold
matriz de intervalo
\series default
 si para cada 
\begin_inset Formula $j\in\left\{ 1,...,n\right\} $
\end_inset

 se cunple que si 
\begin_inset Formula $a_{ij}=a_{kj}=1$
\end_inset

 con 
\begin_inset Formula $i<k$
\end_inset

, entonces 
\begin_inset Formula $a_{hj}=1$
\end_inset

 para todo 
\begin_inset Formula $i\leq h\leq k$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Corollary
Toda matriz de intervalo es totalmente unimodular
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Formulación de modelos de programación lineal entera
\end_layout

\begin_layout Itemize

\series bold
Problema de asignación de tareas 
\series default
(tiempo total y tiempo máximo)
\end_layout

\begin_deeper
\begin_layout Standard
Hay 
\begin_inset Formula $n$
\end_inset

 operarios, cada uno puede realiar, a lo sumo, una tarea
\end_layout

\begin_layout Standard
Hay 
\begin_inset Formula $n$
\end_inset

 tareas, que deben ser realizadas
\end_layout

\begin_layout Standard
El operario 
\begin_inset Formula $i$
\end_inset

 realiza la tarea 
\begin_inset Formula $j$
\end_inset

 en un tiempo 
\begin_inset Formula $t_{ij}\geq0$
\end_inset


\end_layout

\begin_layout Standard
Encontrar la asignación óptima de operarios a tareas de modo que el tiempo
 total sea mínimo.
\end_layout

\begin_layout Standard

\series bold
Formulación:
\end_layout

\begin_layout Standard
Definimos
\begin_inset Formula 
\[
x_{ij}=\begin{cases}
1 & \text{si el operario \ensuremath{i} es asignado a la tarea \ensuremath{j}}\\
0 & \text{en otro caso}
\end{cases}
\]

\end_inset

 y entonces es
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum_{i,j}t_{ij}\cdot x_{ij}\\
s.a.\\
 & \sum_{j=1}^{n}x_{ij}\leq1,\ \forall i=1,...,n\\
 & \sum_{i=1}^{n}x_{ij}\geq1,\ \forall j=1,...,n\\
 & x_{i,j}\in\left\{ 0,1\right\} 
\end{array}
\]

\end_inset

 La primera restricción hace que cada operario solo pueda realizar una tarea
 (podría ponerse en igualdad) y la segunda hace que cada tarea deba ser
 hecha (también podría ponerse en igualdad).
\end_layout

\begin_layout Standard
La matriz asociada al problema es
\begin_inset Formula 
\[
A=\left(\begin{array}{ccccccccccccc}
x_{11} & ... &  & x_{1n} & x_{21} & ... &  & x_{2n} & ... & x_{n1} & ... &  & x_{nn}\\
1 & ... &  & 1 & 0 & ... &  & 0 & 0 & ... &  &  & 0\\
0 & ... &  & 0 & 1 & ... &  & 1 & 0 & 0 & ... &  & 0\\
... &  &  & ... & ... &  &  & ... & ... & ... &  &  & ...\\
0 & ... &  & 0 & 0 & ... &  & 0 & 0 & 1 & ... &  & 1\\
1 & 0 &  & ... & 1 & 0 &  & ... &  & 1 & 0 &  & ...\\
0 & 1 &  & ... & 0 & 1 &  & ... &  & 0 & 1 &  & ...\\
... & ... & ... & ... & ... & ... & ... & ... &  & ... & ... & ... & ...\\
0 & 0 &  & 1 & 0 & 0 &  & 1 &  & 0 & 0 &  & 1
\end{array}\right)
\]

\end_inset

 y la relajación lineal es
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum_{i,j}t_{ij}\cdot x_{ij}\\
s.a.\\
 & \sum_{j=1}^{n}x_{ij}\leq1,\ \forall i=1,...,n\\
 & \sum_{i=1}^{n}x_{ij}\geq1,\ \forall j=1,...,n\\
 & 0\leq x_{i,j}\leq1
\end{array}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Modificación del problema anterior: Minimax y Maximin
\end_layout

\begin_deeper
\begin_layout Itemize
Minimax
\begin_inset Formula 
\[
\begin{array}{cc}
\min & z\\
s.a.\\
 & \sum_{j=1}^{n}x_{ij}=1,\ \forall i=1,...,n\\
 & \sum_{i=1}^{n}x_{ij}=1,\ \forall j=1,...,n\\
 & z\geq t_{ij}x_{ij}\\
 & x_{i,j}\in\left\{ 0,1\right\} \\
 & z\geq0
\end{array}
\]

\end_inset


\end_layout

\begin_layout Itemize
Maximin
\begin_inset Formula 
\[
\begin{array}{cc}
\max & z\\
s.a.\\
 & \sum_{j=1}^{n}x_{ij}=1,\ \forall i=1,...,n\\
 & \sum_{i=1}^{n}x_{ij}=1,\ \forall j=1,...,n\\
 & z\leq t_{ij}x_{ij}\\
 & x_{i,j}\in\left\{ 0,1\right\} \\
 & z\geq0
\end{array}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Camino más corto entre dos vértices en una red
\end_layout

\begin_deeper
\begin_layout Standard
Sea una red 
\begin_inset Formula $R=\left(V,E,d\right)$
\end_inset

, definimos, para todo 
\begin_inset Formula $\left(i,j\right)\in E$
\end_inset


\begin_inset Formula 
\[
x_{ij}=\begin{cases}
1 & \left(i,j\right)\in C\\
0 & \sim
\end{cases}
\]

\end_inset

 donde 
\begin_inset Formula $C$
\end_inset

 es el camino que vamos a dar como resultado.
 La formulación queda, tomando 
\begin_inset Formula $s$
\end_inset

 como nodo inicial y 
\begin_inset Formula $t$
\end_inset

 como final:
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum d_{ij}x_{ij}\\
s.a.\\
 & \sum_{\left(s,j\right)\in E}x_{sj}=1\\
 & \sum_{\left(i,t\right)\in E}x_{it}=1\\
 & \sum_{\left(i,v\right)\in E}x_{iv}-\sum_{\left(v,j\right)\in E}x_{vj}=0,\ \forall v\neq s,t\\
 & x_{i,j}\in\left\{ 0,1\right\} \\
 & \left(\sum_{\left(i,v\right)\in E}x_{iv}\leq1\right)
\end{array}
\]

\end_inset

 La primera restricción nos dice que solo podemos salir una vez del nodo
 inicial.
\end_layout

\begin_layout Standard
La segunda que solo podemos entrar una vez al nodo final.
\end_layout

\begin_layout Standard
La tercera que debemos salir tantas veces como entramos a cada nodo intermedio.
\end_layout

\begin_layout Standard
La que está entre paréntesis hace que solo podamos usar una vez cada eje,
 aunque no es necesario añadirla, surge espontáneamente de las restricciones
 anteriores y de buscar minimización.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Árbol generador de mínimo coste
\end_layout

\begin_deeper
\begin_layout Standard
Definimos, para todo 
\begin_inset Formula $\left(i,j\right)\in E$
\end_inset


\begin_inset Formula 
\[
x_{ij}=\begin{cases}
1 & \left(i,j\right)\in AGMC\\
0 & \sim
\end{cases}
\]

\end_inset

 y el problema puede formularse como 
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum c_{ij}x_{ij}\\
s.a.\\
 & \sum_{\left(i,j\right)\in E}x_{ij}=n-1\\
 & \sum_{\left(i,j\right)\in E_{S}}x_{ij}\leq\left|S\right|-1,\ \forall S\subset V|\left|S\right|\geq3\\
 & x_{i,j}\in\left\{ 0,1\right\} 
\end{array}
\]

\end_inset

 esta formulación se denomina 
\series bold
AUPM-1
\series default
.
\end_layout

\begin_layout Standard
La primera restricción nos dice que la solución debe tener tamaño 
\begin_inset Formula $m=n-1$
\end_inset


\end_layout

\begin_layout Standard
La segunda impide que se formen ciclos.
 Por tanto tenemos 
\begin_inset Formula $m=n-1$
\end_inset

 y no hay ciclos, y es un árbol.
\end_layout

\begin_layout Standard
Una propiedad interesante de este problema es que la relajación lineal de
 este modelo produce soluciones enteras, a pesar de que 
\begin_inset Formula $A$
\end_inset

 no es TU.
 
\end_layout

\begin_layout Standard
Otra formulación es la siguiente
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum c_{ij}x_{ij}\\
s.a.\\
 & \sum_{\left(i,j\right)\in E}x_{ij}=n-1\\
 & \sum_{\left(i,j\right)\in\left[S,V\setminus S\right]}x_{ij}\geq1,\ \forall S\subset V|S\neq\emptyset,V\\
 & x_{i,j}\in\left\{ 0,1\right\} 
\end{array}
\]

\end_inset

 que se denomina 
\series bold
AUPM-2
\series default
.
\end_layout

\begin_layout Standard
La primera restricción es la misma
\end_layout

\begin_layout Standard
La segunda nos dice que todo corte debe tener algún eje en la solución,
 lo que implica que la solución debe ser conexa.
 Por tanto tenemos 
\begin_inset Formula $m=n-1$
\end_inset

 y conexo, por lo que es un árbol.
\end_layout

\begin_layout Standard
Esta vez la relajación lineal no produce necesariamente soluciones enteras.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Problema del viajante de comercio (Dantzig-Fullerson-Jhonson)
\end_layout

\begin_deeper
\begin_layout Standard
Dos formulaciones:
\end_layout

\begin_layout Itemize
Definimos
\begin_inset Formula 
\[
x_{ij}=\begin{cases}
1 & \text{el recorrido visita \ensuremath{i} y a continuación \ensuremath{j}}\\
0 & \sim
\end{cases}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
y la formulación del modelo es
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum_{i\neq j}d_{ij}x_{ij}\\
s.a.\\
 & \sum_{j\in V,j\neq i}x_{ij}=1,\ \forall i\in V\\
 & \sum_{i\in V,i\neq j}x_{ij}=1,\ \forall j\in V\\
 & x_{i,j}\in\left\{ 0,1\right\} 
\end{array}
\]

\end_inset

 La primera restricción nos dice que salimos una vez de cada nodo, y la
 segunda que entramos una vez a cada nodo.
\end_layout

\end_deeper
\begin_layout Itemize
Definimos
\begin_inset Formula 
\[
x_{e}=\begin{cases}
1 & e\in recorrido\ óptimo\\
0 & \sim
\end{cases}
\]

\end_inset

 y el modelo queda
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum d_{e}x_{e}\\
s.a.\\
 & \sum_{e\in N\left(v\right)}x_{e}=2\\
 & \sum_{e\in E_{S}}x_{e}\leq\left|S\right|-1,\ \left|S\right|\geq3\\
 & x_{e}\in\left\{ 0,1\right\} 
\end{array},\ \forall v\in V
\]

\end_inset

 la primera restricción nos dice que para cada nodo tiene que haber dos
 aristas adyacentes a este en la solución, y la segunda que no deben formarse
 ciclos internos.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Formulación alternativa (Miller-Tuccker-Zemlin)
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
x_{ij}=\begin{cases}
1 & i\rightarrow j\\
0 & \sim
\end{cases}
\]

\end_inset

 Sean 
\begin_inset Formula $u_{i}\in\mathbb{R}^{+}$
\end_inset

 y 
\begin_inset Formula $V=\left\{ 0,...,n-1\right\} $
\end_inset

 donde 
\begin_inset Formula $0$
\end_inset

 es el origen.
 El modelo es
\begin_inset Formula 
\[
\begin{array}{cc}
\min & \sum_{i\neq j}d_{ij}x_{ij}\\
s.a.\\
 & \sum_{j\in V,j\neq i}x_{ij}=1,\ \forall i\in V\\
 & \sum_{i\in V,i\neq j}x_{ij}=1,\ \forall j\in V\\
 & u_{i}-u_{j}+nx_{ij}\leq n-1,\ \forall i\neq j\in\left\{ 1,...,n-1\right\} \\
 & x_{i,j}\in\left\{ 0,1\right\} \\
 & u_{i}\in\mathbb{R}^{+}
\end{array}
\]

\end_inset

 La nueva restricción añadida evita que haya ciclos que no contengan al
 nodo origen.
 Es decir, si 
\begin_inset Formula $x$
\end_inset

 es solución factible del PVC, entonces cualquier ciclo de 
\begin_inset Formula $x$
\end_inset

 contiene al nodo 0.
\end_layout

\begin_layout Proof
Para verlo, supongamos que no es así, es decir, que existe un ciclo alrededor
 de 
\begin_inset Formula $\left\{ 1,...,k\right\} $
\end_inset

, entonces
\begin_inset Formula 
\[
\begin{array}{ccc}
u_{1}-u_{2}+n & \leq & n-1\\
u_{2}-u_{3}+n & \leq & n-1\\
... & ...\\
u_{k}-u_{1}+n & \leq & n-1
\end{array}
\]

\end_inset

 sumando todo esto, queda
\begin_inset Formula 
\[
kn\leq k\left(n-1\right)\#
\]

\end_inset

 lo cual es imposible.
\end_layout

\begin_layout Standard
Además, se verifica que, si 
\begin_inset Formula $x$
\end_inset

 es un circuito hamiltoniano, 
\begin_inset Formula $u_{0}=0$
\end_inset

 y 
\begin_inset Formula $u_{i}=t\iff i$
\end_inset

 es el 
\begin_inset Formula $t$
\end_inset

-ésimo vértice visitado.
 Entonces
\end_layout

\begin_layout Itemize
si 
\begin_inset Formula $x_{ij}=0\implies u_{i}-u_{j}\leq n-1$
\end_inset


\end_layout

\begin_layout Itemize
si 
\begin_inset Formula $x_{ij}=1\implies u_{i}-u_{j}+n\leq n-1$
\end_inset


\end_layout

\begin_deeper
\begin_layout Proof
La primera afirmación es obvia, pues 
\begin_inset Formula $1\leq u_{i},u_{j}\leq n-1$
\end_inset

.
 Respecto a la segunda, se verificara si, y solo si
\begin_inset Formula 
\[
u_{i}-u_{j}\leq-1\iff u_{j}\geq u_{i}+1
\]

\end_inset

 pero, como 
\begin_inset Formula $x_{ij}=1$
\end_inset

 y 
\begin_inset Formula $u_{i}$
\end_inset

 indica el orden de visitas, entonces 
\begin_inset Formula $u_{j}=u_{i}+1\checkmark$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Ahora vamos a ver cómo modelar algunas situaciones genéricas y habituales:
\end_layout

\begin_layout Itemize

\series bold
Una variable binaria cuyo valor depende de la relación entre otras dos variables
 enteras
\end_layout

\begin_deeper
\begin_layout Standard
Supongamos que tenemos 
\begin_inset Formula $x_{1},x_{2}\in\mathbb{Z}^{+},y\in\left\{ 0,1\right\} $
\end_inset

 de tal forma que 
\begin_inset Formula $y=1\iff x_{1}>x_{2}$
\end_inset

.
 Esto puede modelarse como
\begin_inset Formula 
\[
\begin{cases}
x_{1}-x_{2}-My\leq0 & \left(1\right)\\
x_{2}-x_{1}+\left(1+M\right)y\leq M & \left(2\right)
\end{cases}
\]

\end_inset

 donde 
\begin_inset Formula $M$
\end_inset

 es un número suficientemente grande.
\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\implies\right]$
\end_inset

 
\begin_inset Formula $y=1\overset{\left(2\right)}{\implies}x_{2}-x_{1}+1\leq0\iff x_{1}\geq x_{2}+1\overset{x_{1},x_{2}\in\mathbb{Z}}{\iff}x_{1}>x_{2}$
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $\left[\impliedby\right]$
\end_inset


\begin_inset Formula $x_{1}>x_{2}\overset{\left(1\right)}{\implies}y=1$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Una variable es mayor que el mínimo de otras dos
\end_layout

\begin_deeper
\begin_layout Standard
Si tenemos 
\begin_inset Formula $z\geq\min\left\{ x_{1},x_{2}\right\} $
\end_inset

, sabemos que esto se verifica si, y solo si, se cumple, al menos, una de
 
\begin_inset Formula $z\geq x_{1}$
\end_inset

 ó 
\begin_inset Formula $z\geq x_{2}$
\end_inset

.
\end_layout

\begin_layout Standard
Puede modelarse como
\begin_inset Formula 
\[
\begin{cases}
x_{1}-z\leq My\\
x_{2}-z\leq M\left(1-y\right)
\end{cases}
\]

\end_inset

 con 
\begin_inset Formula $y\in\left\{ 0,1\right\} $
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Una variable es menor que el máximo de otras dos
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $z\leq\max\left\{ x_{1},x_{2}\right\} \iff z\leq x_{1}$
\end_inset

 ó 
\begin_inset Formula $z\leq x_{2}$
\end_inset

.
 Se puede modelar
\begin_inset Formula 
\[
\begin{cases}
z-x_{1}\leq My\\
z-x_{2}\leq M\left(1-y\right)
\end{cases}
\]

\end_inset

 con 
\begin_inset Formula $y\in\left\{ 0,1\right\} $
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Mínimo de dos variables binarias
\end_layout

\begin_deeper
\begin_layout Standard
Ahora es 
\begin_inset Formula $x_{1},x_{2}\in\left\{ 0,1\right\} $
\end_inset

 e 
\begin_inset Formula $y=\min\left\{ x_{1},x_{2}\right\} $
\end_inset

.
 Podemos hacerlo como
\begin_inset Formula 
\[
\begin{cases}
y\leq x_{1}\\
y\leq x_{2}\\
y\geq x_{1}+x_{2}-1
\end{cases}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Máximo de dos variables binarias
\end_layout

\begin_deeper
\begin_layout Standard
Ahora es 
\begin_inset Formula $x_{1},x_{2}\in\left\{ 0,1\right\} $
\end_inset

 e 
\begin_inset Formula $y=\max\left\{ x_{1},x_{2}\right\} $
\end_inset

.
 Podemos hacerlo como
\begin_inset Formula 
\[
\begin{cases}
y\geq x_{1}\\
y\geq x_{2}\\
y\leq x_{1}+x_{2}
\end{cases}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Que se verifique al menos 1 entre 2 restricciones
\end_layout

\begin_deeper
\begin_layout Standard
Tenemos 2 restricciones de las que queremos que se verifique al menos una.
 Podemos expresarlas como
\begin_inset Formula 
\[
g_{1}\left(x_{1},...,x_{n}\right)\leq0
\]

\end_inset


\begin_inset Formula 
\[
g_{2}\left(x_{1},...,x_{n}\right)\leq0
\]

\end_inset

 Para que se verifique al menos una de ellas, añadimos una nueva variable
 
\begin_inset Formula $y\in\left\{ 0,1\right\} $
\end_inset

 y añadimos las restricciones
\begin_inset Formula 
\[
g_{1}\left(x_{1},...,x_{n}\right)\leq My
\]

\end_inset


\begin_inset Formula 
\[
g_{2}\left(x_{1},...,x_{n}\right)\leq M\left(1-y\right)
\]

\end_inset

 donde 
\begin_inset Formula $M$
\end_inset

 es un número positivo suficientemente grande.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Que se verifiquen al menos 
\begin_inset Formula $\boldsymbol{k}$
\end_inset

 restricciones entre 
\begin_inset Formula $\boldsymbol{m}$
\end_inset

 posibles
\end_layout

\begin_deeper
\begin_layout Standard
Ahora añadimos 
\begin_inset Formula $y_{i}\in\left\{ 0,1\right\} ,\ i=1,...,m$
\end_inset

 variables binarias, así como las restricciones
\begin_inset Formula 
\[
g_{i}\left(x_{1},...,x_{n}\right)\leq M\left(1-y_{i}\right),\ 1\leq i\leq n
\]

\end_inset


\begin_inset Formula 
\[
\sum_{i=1}^{m}y_{i}\geq k
\]

\end_inset

 
\end_layout

\end_deeper
\begin_layout Section
Resolución de problemas de programación lineal entera
\end_layout

\begin_layout Subsection
Método de ramificación y acotación
\end_layout

\begin_layout Standard
Supongamos que queremos resolver un problema entero 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

.
 El algoritmo de ramifiación y acotación proporciona un método de resolución.
\end_layout

\begin_layout Standard
Lo que hacemos es relajar el problema y obtener 
\begin_inset Formula $\left(P_{L}\right)$
\end_inset

, lo solucionamos (simplex), obteniendo una solución óptima 
\begin_inset Formula $z_{L}^{*}$
\end_inset

.
 Si esta solución, por casualidad, es también solución de 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

, habremos terminado.
 Pero, por desgracia, esto ocurrirá en raras ocasiones.
\end_layout

\begin_layout Standard
No obstante, podemos utilizar esta solución como punto de partida hacia
 una solución de nuestro problema.
 Elegimos alguna de las variables de decisión que deba ser entera, y generamos
 dos subproblemas, los correspondientes a añadir las restricciones 
\begin_inset Formula $x_{i}\leq\left[x_{i}^{*}\right]$
\end_inset

 y 
\begin_inset Formula $x_{i}\geq\left[x_{i}^{*}\right]+1$
\end_inset

, que nos dan los subproblemas 
\begin_inset Formula $\left(P0\right)$
\end_inset

 y 
\begin_inset Formula $\left(P1\right)$
\end_inset

, respectivamente.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename pegado21.png
	scale 85

\end_inset


\end_layout

\begin_layout Standard
Resolvemos estos nuevos subproblemas y obtenemos nuevos valores 
\begin_inset Formula $z_{0}^{*},$
\end_inset


\begin_inset Formula $z_{1}^{*}$
\end_inset

, que serán como mucho tan buenas como 
\begin_inset Formula $z_{L}^{*}$
\end_inset

.
 Y, de nuevo, puede que sean soluciones de 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

, o no.
\end_layout

\begin_layout Standard
Una opción es reiterar este proceso hasta ramificar todas las variables,
 obteniendo todas las posibles soluciones de 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

 y, entre todas ellas, elegir la mejor.
\end_layout

\begin_layout Standard
Sin embargo, podemos usar la naturaleza de los problemas de optimización
 lineal para hacer más eficiente el proceso de búsqueda de la solución óptima.
 Cuando vamos ramificando, la primera solución factible de 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

 que encontremos se va a denominar 
\series bold
solución incumbente
\series default
, que pasa a ser candidata a solución óptima de nuestro problema original.
 Al valor óptimo de esta solución se le denomina 
\series bold
valor incumbente
\series default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename pegado22.png
	scale 85

\end_inset


\end_layout

\begin_layout Standard
Una interesante observación es que, dado que las soluciones de los subproblemas
 son como mucho tan buenas como la del problema que las genera, entonces,
 si el valor óptimo en un nodo es peor que el valor incumbente, no es necesario
 ramificar ese nodo: no puede generar mejores soluciones.
\end_layout

\begin_layout Standard
Por tanto, cuando obtenemos una solución incumbente, podemos descartar (podar,
 acotar) ramas cuyas soluciones podemos asegurar que serán peores que la
 actual, que actualizaremos si en algún momento encontramos una mejor solución.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename pegado23.png
	scale 85

\end_inset


\end_layout

\begin_layout Standard
Así, terminaremos cuando no queden ramas por explorar ni subproblemas por
 resolver.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename pegado24.png
	scale 85

\end_inset


\end_layout

\begin_layout Subsubsection
¿Cómo seleccionamos el nodo activo a resolver?
\end_layout

\begin_layout Standard
No hay una forma sistemática y óptima de hacerlo, pero hay algunas reglas
 que son, generalmente, de utilidad:
\end_layout

\begin_layout Itemize

\series bold
Reglas a priori:
\end_layout

\begin_deeper
\begin_layout Itemize
Búsqueda en profundidad + backtracking: consiste en que, una vez seleccionado
 un nodo, lo exploramos hasta llegar a las soluciones de 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

, o sea, a los nodos hoja.
 Cuando llegamos a estos, tiramos hacia atrás, visitando los vecinos del
 nodo.
 Si pueden mejorar el valor previo, los exploramos, si no, pasamos al siguiente
 vecino.
 Si no quedan vecinos, subimos al padre, etc.
 Hasta que no queden ramas por explorar ni subproblemas por resolver.
\end_layout

\begin_deeper
\begin_layout Itemize
La experiencia apunta a que se encuentran más rápidamente soluciones factibles
\end_layout

\end_deeper
\begin_layout Itemize
Búsqueda en anchura: se exploran todos los vecinos antes de ir a los hijos
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Reglas adaptativas
\series default
: por ejemplo, elegir el nodo con mejor valor óptimo
\end_layout

\begin_layout Subsubsection
¿Cómo seleccionamos la variable a ramificar?
\end_layout

\begin_layout Standard
La experiencia demuestra que la elección adecuada de la variable de ramificación
 puede acelerar la resolución del problema.
 Sin embargo, como antes, no existen reglas robustas que indiquen cómo seleccion
ar la variable de ramificación.
 Algunas posibilidades son:
\end_layout

\begin_layout Itemize
Elegir aquella con mayor valor fraccionario
\end_layout

\begin_layout Itemize
Elegir aquella cuyo valor fraccionario queda más cerca de 0.5
\end_layout

\begin_layout Itemize
Elegir las variables más importantes (por ejemplo, las que más influyen
 en la función objetivo)
\end_layout

\begin_layout Subsection
Método de los hiperplanos de corte
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
Una 
\series bold
desigualdad válida
\series default
 o 
\series bold
hiperplano de corte
\series default
 es una desigualdad que cumplen las soluciones factibles del problema lineal
 entero.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las desigualdades válidas pueden utilizarse para:
\end_layout

\begin_layout Itemize
Obtener mejores cotas en los nodos del árbol de ramificación
\end_layout

\begin_layout Itemize
Resolver el problema de programación lineal entera (
\series bold
método de hiperplanos de corte de Gomory
\series default
)
\end_layout

\begin_layout Subsubsection
Hiperplano de corte entero
\end_layout

\begin_layout Standard
Estamos ante el problema
\begin_inset Formula 
\[
\begin{array}{cc}
\left(P_{E}\right)\max & cx\\
s.a.\\
 & Ax=b\\
 & x\geq0\\
 & x\in\mathbb{Z}^{n}
\end{array}
\]

\end_inset

 donde suponemos que 
\begin_inset Formula $A$
\end_inset

 y 
\begin_inset Formula $b$
\end_inset

 son enteros.
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $x^{*}$
\end_inset

 la solución óptima del problema lineal relajado y supongamos que existe
 un índice 
\begin_inset Formula $k$
\end_inset

 tal que 
\begin_inset Formula $x_{k}\notin\mathbb{Z}$
\end_inset

 (si hay varios podemos tomar aquél con parte fraccionaria más cercana a
 0.5).
\end_layout

\begin_layout Standard
\begin_inset Formula $x_{k}$
\end_inset

 será una variable básica cuya representación en la base óptima 
\begin_inset Formula $B$
\end_inset

 tendrá la forma
\begin_inset Formula 
\[
x_{k}+\sum_{j\notin B}y_{kj}x_{j}=x_{k}^{*}
\]

\end_inset

 La desigualdad
\begin_inset Formula 
\[
-\sum_{j\notin B}f_{kj}x_{j}\leq-f_{k}
\]

\end_inset

, donde 
\begin_inset Formula $f_{kj}$
\end_inset

 es la parte fraccional de 
\begin_inset Formula $y_{kj}$
\end_inset

 y 
\begin_inset Formula $f_{k}$
\end_inset

 es la parte fraccional de 
\begin_inset Formula $x_{k}^{*}$
\end_inset

, es una desigualdad válida de 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

 que no satisface la solución óptima del problema lineal relajado.
\end_layout

\begin_layout Proof
Veamos esta última afirmación.
 
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
x_{k}+\sum_{j\notin B}y_{kj}x_{j}=x_{k}^{*}
\]

\end_inset

 puede reescribirse como
\begin_inset Formula 
\[
x_{k}+\sum_{j\notin B}\left(\left[y_{kj}\right]+f_{kj}\right)x_{j}=\left[x_{k}^{*}\right]+f_{k}
\]

\end_inset

 agrupando
\begin_inset Formula 
\[
x_{k}+\sum_{j\notin B}\left[y_{kj}\right]x_{j}-\left[x_{k}^{*}\right]=f_{k}-\sum_{j\notin B}f_{kj}x_{j}\leq f_{k}<1
\]

\end_inset


\end_layout

\begin_layout Proof
Ahora bien, si consideramos soluciones enteras, entonces los 
\begin_inset Formula $x_{j}$
\end_inset

 y 
\begin_inset Formula $x_{k}$
\end_inset

 son enteros, por lo que la parte izquierda es un entero menor que uno,
 o lo que es lo mismo, la parte izquierda es menor o igual que cero, por
 tanto
\begin_inset Formula 
\[
0\geq f_{k}-\sum_{j\notin B}f_{kj}x_{j}\implies-\sum_{j\notin B}f_{kj}x_{j}\leq-f_{k}
\]

\end_inset

 Y que la solución óptima del problema lineal relajado no lo satisface es
 obvio, pues en esa solución los 
\begin_inset Formula $x_{j}$
\end_inset

 son 0 (son no básicos), por lo que quedaría
\begin_inset Formula 
\[
0\leq-f_{k}
\]

\end_inset

 y 
\begin_inset Formula $f_{k}$
\end_inset

 es la parte entera de 
\begin_inset Formula $x_{k}$
\end_inset

, que no es entero, luego 
\begin_inset Formula $-f_{k}<0$
\end_inset

, y es una contradicción.
\end_layout

\begin_layout Subsubsection
Hiperplano de corte para un problema entero mixto
\end_layout

\begin_layout Standard
Ahora queremos resolver
\begin_inset Formula 
\[
\begin{array}{cc}
\left(P_{E}\right)\min & cx\\
s.a.\\
 & Ax=b\\
 & x\geq0\\
 & x_{i}\in\mathbb{Z},\ \forall i\in I
\end{array}
\]

\end_inset

 y suponemos que 
\begin_inset Formula $A$
\end_inset

 y 
\begin_inset Formula $b$
\end_inset

 son enteros.
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $x^{*}$
\end_inset

 la solución óptima del problema lineal relajado y supongamos que existe
 un índice 
\begin_inset Formula $k\in I$
\end_inset

 (de entre las variables enteras) tal que 
\begin_inset Formula $x_{k}\notin\mathbb{Z}$
\end_inset

 (si hay varios tomamos el que tenga parte fraccionaria más cercana a 0.5).
 Entonces 
\begin_inset Formula $x_{k}$
\end_inset

 será una variable básica cuya representación en la base óptima 
\begin_inset Formula $B$
\end_inset

 será
\begin_inset Formula 
\[
x_{k}+\sum_{j\notin B}y_{kj}x_{j}=x_{k}^{*}
\]

\end_inset

 Y la siguiente desigualdad es una desigualdad básica de 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

 que no satisface la solución óptima del problema lineal relajado
\begin_inset Formula 
\[
\sum_{j\in N^{-}}\frac{f_{k}}{1-f_{k}}y_{kj}x_{j}-\sum_{j\in N^{+}}y_{kj}x_{j}\leq-f_{k}
\]

\end_inset

 donde 
\begin_inset Formula $f_{kj}$
\end_inset

 es la parte fraccional de 
\begin_inset Formula $y_{kj}$
\end_inset

, 
\begin_inset Formula $f_{k}$
\end_inset

 es la parte fraccional de 
\begin_inset Formula $x_{k}^{*}$
\end_inset

, 
\begin_inset Formula $N^{-}=\left\{ j\notin B:y_{kj}<0\right\} $
\end_inset

 y 
\begin_inset Formula $N^{+}=\left\{ j\notin B:y_{kj}>0\right\} $
\end_inset

.
\end_layout

\begin_layout Proof
Veamos esta última afirmación.
\begin_inset Formula 
\[
x_{k}+\sum_{j\notin B}y_{kj}x_{j}=x_{k}^{*}\iff x_{k}+\sum_{j\notin B}y_{kj}x_{j}=\left[x_{k}^{*}\right]+f_{k}\iff x_{k}-\left[x_{k}^{*}\right]=-\sum_{j\in N}y_{kj}x_{j}+f_{k}
\]

\end_inset

 Y nos encontramos con dos casos:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x_{k}\leq\left[x_{k}^{*}\right]$
\end_inset

, entonces 
\begin_inset Formula $x_{k}-\left[x_{k}^{*}\right]=-\sum_{j\in N}y_{kj}x_{j}+f_{k}\leq0\implies-\sum_{j\in N}y_{kj}x_{j}\leq-f_{k}\implies-\sum_{j\in N^{+}}y_{kj}x_{j}-\sum_{j\in N^{-}}y_{kj}x_{j}\leq-f_{k}$
\end_inset

, y claramente, el segundo término de la parte izquierda es negativo, luego
 restamos algo negativo, y debe ser
\begin_inset Formula 
\[
-\sum_{j\in N^{+}}y_{kj}x_{j}\leq-f_{k}\qquad\left(1\right)
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $x_{k}\geq\left[x_{k}^{*}\right]+1$
\end_inset

, en este caso 
\begin_inset Formula $-\sum_{j\in N}y_{kj}x_{j}+f_{k}\geq1\implies-\sum_{j\in N}y_{kj}x_{j}\geq1-f_{k}\implies-\sum_{j\in N^{+}}y_{kj}x_{j}-\sum_{j\in N^{-}}y_{kj}x_{j}\geq1-f_{k}$
\end_inset

, y el primer término de la parte izquierda es positivo, luego restamos
 algo positivo, entonces
\begin_inset Formula 
\[
-\sum_{j\in N^{-}}y_{kj}x_{j}\geq1-f_{k}\implies\sum_{j\in N^{-}}y_{kj}x_{j}\leq f_{k}-1
\]

\end_inset

 multiplicando por 
\begin_inset Formula $\frac{f_{k}}{1-f_{k}}>0$
\end_inset

 queda
\begin_inset Formula 
\[
\sum_{j\in N^{-}}\frac{f_{k}}{1-f_{k}}y_{kj}x_{j}\leq-f_{k}\qquad\left(2\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Entonces, para ver que se verifica la desigualdad
\begin_inset Formula 
\[
\sum_{j\in N^{-}}\frac{f_{k}}{1-f_{k}}y_{kj}x_{j}-\sum_{j\in N^{+}}y_{kj}x_{j}\leq-f_{k}
\]

\end_inset

 observamos que:
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $x_{k}\leq\left[x_{k}^{*}\right]$
\end_inset

, entonces se verifica 
\begin_inset Formula $\left(1\right)$
\end_inset

, pero, además, en ese caso el primer término de la parte izquierda de la
 desigualdad es no positivo, por lo que se verifica la desigualdad
\end_layout

\begin_layout Itemize
Si 
\begin_inset Formula $x_{k}\geq\left[x_{k}^{*}\right]+1$
\end_inset

, entonces se verifica 
\begin_inset Formula $\left(2\right)$
\end_inset

, y, además, el segundo término de la parte izquierda es no negativo, y
 lo estamos restando, por lo que se verifica la desigualdad
\end_layout

\end_deeper
\begin_layout Subsubsection
Desigualdades de Chvátal-Gomory
\end_layout

\begin_layout Standard
Consideremos un problema de programación entera
\begin_inset Formula 
\[
\begin{array}{cc}
\left(P_{E}\right)\max & c^{t}x\\
s.a.\\
 & Ax\leq b\\
 & x\in\mathbb{Z}_{+}^{n}
\end{array}
\]

\end_inset

 donde 
\begin_inset Formula $A$
\end_inset

 es una matriz 
\begin_inset Formula $m\times n$
\end_inset

.
\end_layout

\begin_layout Standard
Entonces, para cada 
\begin_inset Formula $u\in\mathbb{R}_{+}^{m}$
\end_inset

, la desigualdad
\begin_inset Formula 
\[
\sum_{j=1}^{n}\left[\sum_{i=1}^{m}u_{i}a_{ij}\right]x_{j}\leq\left[\sum_{i=1}^{m}u_{i}b_{i}\right]
\]

\end_inset

 es una desigualdad válida del problema 
\begin_inset Formula $\left(P_{E}\right)$
\end_inset

, y este conjunto de desigualdades son las 
\series bold
desigualdades de Chvátal-Gomory
\series default
.
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Proposition
Cualquier desigualdad válida del conjunto 
\begin_inset Formula $\left\{ x\in\mathbb{Z}^{n}:Ax\leq b,x\geq0\right\} $
\end_inset

 se puede obtener aplicando el procedimiento de Chvátal-Gomory (es decir,
 añadiendo hiperplanos de corte mediante uso de desigualdades de Chvátal-Gomory)
 un número finito de veces.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
